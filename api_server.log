2025-06-20 21:45:45,717 - faiss.loader - INFO - Loading faiss.
2025-06-20 21:45:45,728 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-20 21:45:45,731 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-20 21:45:49,528 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-20 21:45:49,529 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-20 21:45:50,197 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-20 21:45:50,199 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-20 21:45:50,201 - __main__ - INFO - 🚀 Starting CRASH-RESISTANT server on port 8000
2025-06-20 21:45:50,201 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-20 21:45:50,201 - __main__ - INFO - 🧠 Local model support enabled - NO DOWNLOADS
2025-06-20 21:45:50,238 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-20 21:45:50,238 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-20 21:45:50,288 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-20 21:45:50,289 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-20 21:45:50,291 - api_server - INFO - 🚀 Starting CRASH-RESISTANT Subscription Analytics API Server
2025-06-20 21:45:50,291 - api_server - INFO - Semantic learning: enabled
2025-06-20 21:45:50,291 - api_server - INFO - Available tools: 7
2025-06-20 21:47:43,609 - api_server - INFO - 🔧 Tool execution request: get_database_status
2025-06-20 21:47:43,610 - api_server - INFO - ⚙️ Executing get_database_status with parameters: {}
2025-06-20 21:47:43,610 - api_server - INFO - 🔍 Executing query: 
        SELECT 
            (SELECT COUNT(*) FROM subscription_contract_v2) as total_subscriptions,...
2025-06-20 21:47:45,065 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-20 21:47:45,066 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-20 21:47:45,066 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-20 21:47:46,578 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-20 21:47:46,833 - api_server - INFO - ✅ Tool get_database_status completed successfully in 3.22s
2025-06-20 21:48:27,094 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-20 21:48:27,096 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT sc.merchant_user_id) FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id WHERE pd.status = "ACTIVE"'}
2025-06-20 21:48:27,096 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT sc.merchant_user_id) FROM subscription_contract_v2 AS sc JOIN subscription_pay...
2025-06-20 21:48:27,097 - api_server - INFO - ✅ SQL validation passed
2025-06-20 21:48:27,097 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT sc.merchant_user_id) FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id WHERE pd.status = "ACTIVE"
2025-06-20 21:48:27,097 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT sc.merchant_user_id) FROM subscription_contract_v2 AS sc JOIN subscription_pay...
2025-06-20 21:48:29,887 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-20 21:48:30,147 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-20 21:48:30,148 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.05s
2025-06-20 21:49:07,062 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-20 21:49:07,064 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'how many of these users have paid', 'sql_query': 'SELECT COUNT(DISTINCT sc.merchant_user_id) FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id WHERE pd.status = "ACTIVE"', 'was_helpful': True}
2025-06-20 21:49:07,064 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-20 21:49:07,105 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-20 21:49:07,201 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-20 21:49:07,202 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.14s
2025-06-20 21:49:13,073 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-20 21:49:13,074 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT DISTINCT sc.merchant_user_id FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id'}
2025-06-20 21:49:13,074 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DISTINCT sc.merchant_user_id FROM subscription_contract_v2 AS sc JOIN subscription_payment_de...
2025-06-20 21:49:13,074 - api_server - INFO - ✅ SQL validation passed
2025-06-20 21:49:13,074 - api_server - INFO - 🔍 Executing: SELECT DISTINCT sc.merchant_user_id FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id
2025-06-20 21:49:13,075 - api_server - INFO - 🔍 Executing query: SELECT DISTINCT sc.merchant_user_id FROM subscription_contract_v2 AS sc JOIN subscription_payment_de...
2025-06-20 21:49:15,726 - api_server - INFO - ✅ Query executed successfully, returned 63 rows
2025-06-20 21:49:15,987 - api_server - INFO - ✅ Dynamic SQL completed successfully with 63 rows
2025-06-20 21:49:15,988 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 2.91s
2025-06-20 21:50:10,603 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-20 21:50:10,604 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'show me the users', 'sql_query': 'SELECT DISTINCT sc.merchant_user_id FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id', 'was_helpful': True}
2025-06-20 21:50:10,604 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-20 21:50:10,620 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-20 21:50:10,713 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-20 21:50:10,713 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-23 10:12:39,361 - faiss.loader - INFO - Loading faiss.
2025-06-23 10:12:39,386 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-23 10:12:39,390 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 10:12:43,700 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-23 10:12:43,700 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 10:12:44,446 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 10:12:44,450 - __main__ - INFO - 🧠 Loaded 2 queries from memory
2025-06-23 10:12:44,450 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-23 10:12:44,452 - __main__ - INFO - 🚀 Starting CRASH-RESISTANT server on port 8000
2025-06-23 10:12:44,452 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-23 10:12:44,452 - __main__ - INFO - 🧠 Local model support enabled - NO DOWNLOADS
2025-06-23 10:12:44,491 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-23 10:12:44,491 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 10:12:44,545 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 10:12:44,547 - api_server - INFO - 🧠 Loaded 2 queries from memory
2025-06-23 10:12:44,547 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-23 10:12:44,550 - api_server - INFO - 🚀 Starting CRASH-RESISTANT Subscription Analytics API Server
2025-06-23 10:12:44,550 - api_server - INFO - Semantic learning: enabled
2025-06-23 10:12:44,550 - api_server - INFO - Available tools: 7
2025-06-23 10:15:32,271 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 10:15:32,272 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2024-04-01" AND sc.subcription_start_date <= "2024-07-03"'}
2025-06-23 10:15:32,272 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:15:32,273 - api_server - INFO - ✅ SQL validation passed
2025-06-23 10:15:32,273 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2024-04-01" AND sc.subcription_start_date <= "2024-07-03"
2025-06-23 10:15:32,273 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:15:33,990 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-23 10:15:33,991 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-23 10:15:33,992 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-23 10:15:36,220 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-23 10:15:36,552 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-23 10:15:36,552 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 4.28s
2025-06-23 10:15:45,677 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 10:15:45,677 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'number o fsubscriptions between 1st april and 3 july along with their paayment status and success rate for this period', 'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2024-04-01" AND sc.subcription_start_date <= "2024-07-03"', 'was_helpful': False}
2025-06-23 10:15:45,678 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-23 10:15:45,740 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 10:15:45,829 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-23 10:15:45,829 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.15s
2025-06-23 10:15:45,910 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-23 10:15:45,910 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'number o fsubscriptions between 1st april and 3 july along with their paayment status and success rate for this period'}
2025-06-23 10:15:45,923 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-23 10:15:45,923 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-23 10:16:08,808 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 10:16:08,809 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2024-04-01" AND sc.subcription_start_date <= "2024-07-03"'}
2025-06-23 10:16:08,809 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:16:08,809 - api_server - INFO - ✅ SQL validation passed
2025-06-23 10:16:08,809 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2024-04-01" AND sc.subcription_start_date <= "2024-07-03"
2025-06-23 10:16:08,809 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:16:12,076 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-23 10:16:12,365 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-23 10:16:12,366 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.56s
2025-06-23 10:16:14,681 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 10:16:14,682 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'number o fsubscriptions between 1st april and 3 july along with their paayment status and success rate for this period in 1015', 'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2024-04-01" AND sc.subcription_start_date <= "2024-07-03"', 'was_helpful': False}
2025-06-23 10:16:14,682 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-23 10:16:14,703 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 10:16:14,796 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-23 10:16:14,796 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-23 10:16:14,879 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-23 10:16:14,879 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'number o fsubscriptions between 1st april and 3 july along with their paayment status and success rate for this period in 1015'}
2025-06-23 10:16:14,888 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-23 10:16:14,888 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-23 10:16:24,272 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 10:16:24,273 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2025-04-01" AND sc.subcription_start_date <= "2025-07-03"'}
2025-06-23 10:16:24,273 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:16:24,273 - api_server - INFO - ✅ SQL validation passed
2025-06-23 10:16:24,273 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2025-04-01" AND sc.subcription_start_date <= "2025-07-03"
2025-06-23 10:16:24,273 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:16:27,441 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-23 10:16:27,734 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-23 10:16:27,735 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.46s
2025-06-23 10:16:40,401 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 10:16:40,401 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'number o fsubscriptions between 1st april and 3 july along with their paayment status and success rate for this period in 2025', 'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2025-04-01" AND sc.subcription_start_date <= "2025-07-03"', 'was_helpful': False}
2025-06-23 10:16:40,402 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-23 10:16:40,423 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 10:16:40,516 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-23 10:16:40,516 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-23 10:16:40,592 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-23 10:16:40,593 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'number o fsubscriptions between 1st april and 3 july along with their paayment status and success rate for this period in 2025'}
2025-06-23 10:16:40,600 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-23 10:16:40,600 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-23 10:16:46,777 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 10:16:46,778 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2025-04-01" AND sc.subcription_start_date <= "2025-07-03"'}
2025-06-23 10:16:46,778 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:16:46,778 - api_server - INFO - ✅ SQL validation passed
2025-06-23 10:16:46,778 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2025-04-01" AND sc.subcription_start_date <= "2025-07-03"
2025-06-23 10:16:46,779 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE"...
2025-06-23 10:16:50,893 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-23 10:16:51,307 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-23 10:16:51,307 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 4.53s
2025-06-23 10:17:31,774 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 10:17:31,774 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'we asked for status as well', 'sql_query': 'SELECT COUNT(DISTINCT sc.subscription_id) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, COUNT(*) AS total_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) / COUNT(*)) * 100, 2) AS payment_success_rate FROM subscription_contract_v2 sc JOIN subscription_payment_details pd ON sc.subscription_id = pd.subscription_id WHERE sc.subcription_start_date >= "2025-04-01" AND sc.subcription_start_date <= "2025-07-03"', 'was_helpful': True}
2025-06-23 10:17:31,774 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-23 10:17:31,791 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 10:17:31,882 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-23 10:17:31,882 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-23 10:17:43,109 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 10:17:43,110 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(*) AS total_subscriptions_active FROM subscription_contract_v2 WHERE status = "ACTIVE"'}
2025-06-23 10:17:43,110 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(*) AS total_subscriptions_active FROM subscription_contract_v2 WHERE status = "ACTIVE"...
2025-06-23 10:17:43,110 - api_server - INFO - ✅ SQL validation passed
2025-06-23 10:17:43,111 - api_server - INFO - 🔍 Executing: SELECT COUNT(*) AS total_subscriptions_active FROM subscription_contract_v2 WHERE status = "ACTIVE"
2025-06-23 10:17:43,111 - api_server - INFO - 🔍 Executing query: SELECT COUNT(*) AS total_subscriptions_active FROM subscription_contract_v2 WHERE status = "ACTIVE"...
2025-06-23 10:17:46,593 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-23 10:17:46,912 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-23 10:17:46,913 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.80s
2025-06-23 10:18:03,047 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 10:18:03,047 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'number of subsxriptions with active status', 'sql_query': 'SELECT COUNT(*) AS total_subscriptions_active FROM subscription_contract_v2 WHERE status = "ACTIVE"', 'was_helpful': True}
2025-06-23 10:18:03,047 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-23 10:18:03,067 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 10:18:03,159 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-23 10:18:03,159 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-23 10:22:22,585 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 10:22:22,585 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS successful_payments, SUM(pd.trans_amount_decimal) AS total_amount_paid FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id WHERE pd.status = "ACTIVE" GROUP BY sc.merchant_user_id ORDER BY successful_payments DESC LIMIT 5'}
2025-06-23 10:22:22,586 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS successful_payments, SUM(pd....
2025-06-23 10:22:22,586 - api_server - INFO - ✅ SQL validation passed
2025-06-23 10:22:22,586 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS successful_payments, SUM(pd.trans_amount_decimal) AS total_amount_paid FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id WHERE pd.status = "ACTIVE" GROUP BY sc.merchant_user_id ORDER BY successful_payments DESC LIMIT 5
2025-06-23 10:22:22,586 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS successful_payments, SUM(pd....
2025-06-23 10:22:26,252 - api_server - INFO - ✅ Query executed successfully, returned 5 rows
2025-06-23 10:22:26,668 - api_server - INFO - ✅ Dynamic SQL completed successfully with 5 rows
2025-06-23 10:22:26,669 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 4.08s
2025-06-23 10:22:42,994 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 10:22:42,994 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'who are my top 5 customers measured by the number of successfull payments on their currently active subscriptions and what is the total amount they have paid', 'sql_query': 'SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS successful_payments, SUM(pd.trans_amount_decimal) AS total_amount_paid FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id WHERE pd.status = "ACTIVE" GROUP BY sc.merchant_user_id ORDER BY successful_payments DESC LIMIT 5', 'was_helpful': True}
2025-06-23 10:22:42,994 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-23 10:22:43,014 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 10:22:43,098 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-23 10:22:43,099 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-23 11:18:17,547 - faiss.loader - INFO - Loading faiss.
2025-06-23 11:18:17,558 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-23 11:18:17,561 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:18:21,292 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-23 11:18:21,293 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 11:18:22,031 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 11:18:22,034 - __main__ - INFO - 🧠 Loaded 8 queries from memory
2025-06-23 11:18:22,034 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-23 11:18:22,037 - __main__ - INFO - 🚀 Starting CRASH-RESISTANT server on port 8000
2025-06-23 11:18:22,037 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-23 11:18:22,037 - __main__ - INFO - 🧠 Local model support enabled - NO DOWNLOADS
2025-06-23 11:18:22,075 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-23 11:18:22,075 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 11:18:22,128 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 11:18:22,130 - api_server - INFO - 🧠 Loaded 8 queries from memory
2025-06-23 11:18:22,130 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-23 11:18:22,132 - api_server - INFO - 🚀 Starting CRASH-RESISTANT Subscription Analytics API Server
2025-06-23 11:18:22,132 - api_server - INFO - Semantic learning: enabled
2025-06-23 11:18:22,132 - api_server - INFO - Available tools: 7
2025-06-23 11:18:22,132 - api_server - INFO - 🛑 Shutting down API Server
2025-06-23 11:18:39,564 - api_server - INFO - 🛑 Shutting down API Server
2025-06-23 11:18:42,681 - faiss.loader - INFO - Loading faiss.
2025-06-23 11:18:42,697 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-23 11:18:42,701 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 11:18:46,057 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-23 11:18:46,057 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 11:18:46,769 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 11:18:46,771 - __main__ - INFO - 🧠 Loaded 8 queries from memory
2025-06-23 11:18:46,771 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-23 11:18:46,773 - __main__ - INFO - 🚀 Starting CRASH-RESISTANT server on port 8000
2025-06-23 11:18:46,774 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-23 11:18:46,774 - __main__ - INFO - 🧠 Local model support enabled - NO DOWNLOADS
2025-06-23 11:18:46,803 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-23 11:18:46,803 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 11:18:46,852 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 11:18:46,854 - api_server - INFO - 🧠 Loaded 8 queries from memory
2025-06-23 11:18:46,854 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-23 11:18:46,856 - api_server - INFO - 🚀 Starting CRASH-RESISTANT Subscription Analytics API Server
2025-06-23 11:18:46,856 - api_server - INFO - Semantic learning: enabled
2025-06-23 11:18:46,856 - api_server - INFO - Available tools: 7
2025-06-23 11:44:27,216 - api_server - INFO - 🔧 Tool execution request: get_subscriptions_in_last_days
2025-06-23 11:44:27,217 - api_server - INFO - ⚙️ Executing get_subscriptions_in_last_days with parameters: {'days': 7.0}
2025-06-23 11:44:27,217 - api_server - INFO - 🔍 Executing query: 
        SELECT 
            COUNT(*) as new_subscriptions,
            COALESCE(SUM(CASE WHEN statu...
2025-06-23 11:44:28,840 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-23 11:44:28,842 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-23 11:44:28,842 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-23 11:44:31,928 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-23 11:44:32,239 - api_server - INFO - ✅ Tool get_subscriptions_in_last_days completed successfully in 5.02s
2025-06-23 11:44:36,796 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-23 11:44:36,796 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions FROM subscription_contract_v2 AS sc GROUP BY sc.merchant_user_id ORDER BY total_subscriptions DESC LIMIT 10'}
2025-06-23 11:44:36,797 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions FROM subscription_contract_v2 AS sc GROU...
2025-06-23 11:44:36,798 - api_server - INFO - ✅ SQL validation passed
2025-06-23 11:44:36,798 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions FROM subscription_contract_v2 AS sc GROUP BY sc.merchant_user_id ORDER BY total_subscriptions DESC LIMIT 10
2025-06-23 11:44:36,798 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions FROM subscription_contract_v2 AS sc GROU...
2025-06-23 11:44:41,440 - api_server - INFO - ✅ Query executed successfully, returned 10 rows
2025-06-23 11:44:41,731 - api_server - INFO - ✅ Dynamic SQL completed successfully with 10 rows
2025-06-23 11:44:41,731 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 4.94s
2025-06-23 11:44:49,012 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-23 11:44:49,014 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'top 10 users', 'sql_query': 'SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions FROM subscription_contract_v2 AS sc GROUP BY sc.merchant_user_id ORDER BY total_subscriptions DESC LIMIT 10', 'was_helpful': True}
2025-06-23 11:44:49,014 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-23 11:44:49,051 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-23 11:44:49,148 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-23 11:44:49,148 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.14s
2025-06-23 15:59:28,322 - faiss.loader - INFO - Loading faiss.
2025-06-23 15:59:28,346 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-23 15:59:28,350 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-23 15:59:32,534 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-23 15:59:32,534 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-23 15:59:33,341 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-23 15:59:33,344 - api_server - INFO - 🧠 Loaded 9 queries from memory
2025-06-23 15:59:33,344 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 11:36:15,179 - faiss.loader - INFO - Loading faiss.
2025-06-24 11:36:15,312 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-24 11:36:15,316 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-24 11:36:23,604 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-24 11:36:23,605 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 11:36:24,322 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 11:36:24,323 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 11:36:24,326 - __main__ - INFO - 🚀 Starting ENHANCED RENDER.COM server on port 8000
2025-06-24 11:36:24,326 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-24 11:36:24,326 - __main__ - INFO - 🧠 Full semantic learning support enabled
2025-06-24 11:36:24,326 - __main__ - INFO - 💡 Enhanced feedback system with improvement suggestions enabled
2025-06-24 11:36:24,326 - __main__ - INFO - 📊 NEW: Graph generation capabilities enabled
2025-06-24 11:36:24,412 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-24 11:36:24,412 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 11:36:24,469 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 11:36:24,471 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 11:36:24,473 - api_server - INFO - 🚀 Starting ENHANCED Subscription Analytics API Server with Graph Generation
2025-06-24 11:36:24,473 - api_server - INFO - Semantic learning: enabled
2025-06-24 11:36:24,473 - api_server - INFO - Available tools: 9 (including graph generation)
2025-06-24 11:37:41,092 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:37:41,092 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 11:37:41,093 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:37:43,108 - api_server - INFO - 🔧 Tool execution request: get_database_status
2025-06-24 11:37:43,108 - api_server - INFO - ⚙️ Executing get_database_status with parameters: {}
2025-06-24 11:37:43,108 - api_server - INFO - 🔍 Executing query: 
        SELECT 
            (SELECT COUNT(*) FROM subscription_contract_v2) as total_subscriptions,...
2025-06-24 11:37:44,469 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-24 11:37:44,470 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-24 11:37:44,470 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-24 11:37:46,184 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 11:37:46,454 - api_server - INFO - ✅ Tool get_database_status completed successfully in 3.35s
2025-06-24 11:41:39,662 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:41:39,664 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 11:41:39,664 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:41:41,992 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:41:41,993 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS success_rate FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10'}
2025-06-24 11:41:41,993 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 EL...
2025-06-24 11:41:41,994 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:41:41,994 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS success_rate FROM subscription_contract_v2 AS sc JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10
2025-06-24 11:41:41,994 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 EL...
2025-06-24 11:41:44,868 - api_server - INFO - ✅ Query executed successfully, returned 10 rows
2025-06-24 11:41:45,133 - api_server - INFO - ✅ Dynamic SQL completed successfully with 10 rows
2025-06-24 11:41:45,134 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.14s
2025-06-24 11:41:45,238 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:41:45,238 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'merchant_user_id': '1705538300', 'total_payments': 40, 'successful_payments': 37.0, 'success_rate': 92.5}, {'merchant_user_id': '1705537655', 'total_payments': 11, 'successful_payments': 10.0, 'success_rate': 90.91}, {'merchant_user_id': '1705490261', 'total_payments': 16, 'successful_payments': 13.0, 'success_rate': 81.25}, {'merchant_user_id': '1705544966', 'total_payments': 16, 'successful_payments': 13.0, 'success_rate': 81.25}, {'merchant_user_id': '1001561217', 'total_payments': 15, 'successful_payments': 12.0, 'success_rate': 80.0}, {'merchant_user_id': '1705465232', 'total_payments': 5, 'successful_payments': 4.0, 'success_rate': 80.0}, {'merchant_user_id': '1001656012', 'total_payments': 17, 'successful_payments': 13.0, 'success_rate': 76.47}, {'merchant_user_id': '1002576833', 'total_payments': 6, 'successful_payments': 4.0, 'success_rate': 66.67}, {'merchant_user_id': '1700428205', 'total_payments': 16, 'successful_payments': 10.0, 'success_rate': 62.5}, {'merchant_user_id': '1700701136', 'total_payments': 83, 'successful_payments': 49.0, 'success_rate': 59.04}], 'graph_type': 'bar'}
2025-06-24 11:41:45,238 - api_server - INFO - 📊 Generated bar graph with 10 data points
2025-06-24 11:41:45,238 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 11:43:00,750 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:43:00,752 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 11:43:00,752 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:43:04,699 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:43:04,699 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(pd.subcription_payment_details_id)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10'}
2025-06-24 11:43:04,699 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS total_payments, SUM(CASE WHE...
2025-06-24 11:43:04,699 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:43:04,699 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(pd.subcription_payment_details_id)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10
2025-06-24 11:43:04,699 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, COUNT(pd.subcription_payment_details_id) AS total_payments, SUM(CASE WHE...
2025-06-24 11:43:07,819 - api_server - INFO - ✅ Query executed successfully, returned 10 rows
2025-06-24 11:43:08,123 - api_server - INFO - ✅ Dynamic SQL completed successfully with 10 rows
2025-06-24 11:43:08,124 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.43s
2025-06-24 11:43:08,250 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:43:08,250 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'merchant_user_id': '1705538300', 'total_payments': 40, 'successful_payments': 37.0, 'success_rate': 92.5}, {'merchant_user_id': '1705537655', 'total_payments': 11, 'successful_payments': 10.0, 'success_rate': 90.91}, {'merchant_user_id': '1705490261', 'total_payments': 16, 'successful_payments': 13.0, 'success_rate': 81.25}, {'merchant_user_id': '1705544966', 'total_payments': 16, 'successful_payments': 13.0, 'success_rate': 81.25}, {'merchant_user_id': '1001561217', 'total_payments': 15, 'successful_payments': 12.0, 'success_rate': 80.0}, {'merchant_user_id': '1705465232', 'total_payments': 5, 'successful_payments': 4.0, 'success_rate': 80.0}, {'merchant_user_id': '1001656012', 'total_payments': 17, 'successful_payments': 13.0, 'success_rate': 76.47}, {'merchant_user_id': '1002576833', 'total_payments': 6, 'successful_payments': 4.0, 'success_rate': 66.67}, {'merchant_user_id': '1700428205', 'total_payments': 16, 'successful_payments': 10.0, 'success_rate': 62.5}, {'merchant_user_id': '1700701136', 'total_payments': 83, 'successful_payments': 49.0, 'success_rate': 59.04}], 'graph_type': 'bar'}
2025-06-24 11:43:08,250 - api_server - INFO - 📊 Generated bar graph with 10 data points
2025-06-24 11:43:08,250 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 11:45:03,387 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:45:03,389 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 11:45:03,389 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:45:04,918 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:45:04,918 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date"}
2025-06-24 11:45:04,918 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM sub...
2025-06-24 11:45:04,918 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:45:04,919 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date
2025-06-24 11:45:04,919 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM sub...
2025-06-24 11:45:07,622 - api_server - INFO - ✅ Query executed successfully, returned 52 rows
2025-06-24 11:45:07,925 - api_server - INFO - ✅ Dynamic SQL completed successfully with 52 rows
2025-06-24 11:45:07,926 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.01s
2025-06-24 11:45:08,046 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:45:08,046 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_date': '2025-04-01', 'total_payments': 30}, {'payment_date': '2025-04-02', 'total_payments': 60}, {'payment_date': '2025-04-03', 'total_payments': 26}, {'payment_date': '2025-04-04', 'total_payments': 35}, {'payment_date': '2025-04-07', 'total_payments': 27}, {'payment_date': '2025-04-08', 'total_payments': 54}, {'payment_date': '2025-04-09', 'total_payments': 60}, {'payment_date': '2025-04-10', 'total_payments': 51}, {'payment_date': '2025-04-11', 'total_payments': 56}, {'payment_date': '2025-04-14', 'total_payments': 27}, {'payment_date': '2025-04-15', 'total_payments': 26}, {'payment_date': '2025-04-16', 'total_payments': 78}, {'payment_date': '2025-04-17', 'total_payments': 58}, {'payment_date': '2025-04-18', 'total_payments': 41}, {'payment_date': '2025-04-21', 'total_payments': 46}, {'payment_date': '2025-04-22', 'total_payments': 45}, {'payment_date': '2025-04-23', 'total_payments': 70}, {'payment_date': '2025-04-24', 'total_payments': 39}, {'payment_date': '2025-04-25', 'total_payments': 73}, {'payment_date': '2025-04-28', 'total_payments': 58}, {'payment_date': '2025-04-29', 'total_payments': 65}, {'payment_date': '2025-04-30', 'total_payments': 48}, {'payment_date': '2025-05-01', 'total_payments': 27}, {'payment_date': '2025-05-02', 'total_payments': 24}, {'payment_date': '2025-05-03', 'total_payments': 6}, {'payment_date': '2025-05-05', 'total_payments': 58}, {'payment_date': '2025-05-06', 'total_payments': 78}, {'payment_date': '2025-05-07', 'total_payments': 82}, {'payment_date': '2025-05-08', 'total_payments': 36}, {'payment_date': '2025-05-09', 'total_payments': 74}, {'payment_date': '2025-05-12', 'total_payments': 23}, {'payment_date': '2025-05-13', 'total_payments': 66}, {'payment_date': '2025-05-14', 'total_payments': 78}, {'payment_date': '2025-05-15', 'total_payments': 79}, {'payment_date': '2025-05-16', 'total_payments': 61}, {'payment_date': '2025-05-19', 'total_payments': 78}, {'payment_date': '2025-05-20', 'total_payments': 82}, {'payment_date': '2025-05-21', 'total_payments': 66}, {'payment_date': '2025-05-22', 'total_payments': 103}, {'payment_date': '2025-05-23', 'total_payments': 72}, {'payment_date': '2025-05-24', 'total_payments': 4}, {'payment_date': '2025-05-26', 'total_payments': 67}, {'payment_date': '2025-05-27', 'total_payments': 62}, {'payment_date': '2025-05-28', 'total_payments': 52}, {'payment_date': '2025-05-29', 'total_payments': 97}, {'payment_date': '2025-05-30', 'total_payments': 63}, {'payment_date': '2025-06-02', 'total_payments': 78}, {'payment_date': '2025-06-03', 'total_payments': 66}, {'payment_date': '2025-06-04', 'total_payments': 63}, {'payment_date': '2025-06-05', 'total_payments': 62}, {'payment_date': '2025-06-06', 'total_payments': 51}, {'payment_date': '2025-06-09', 'total_payments': 9}], 'graph_type': 'line'}
2025-06-24 11:45:08,046 - api_server - INFO - 📊 Generated line graph with 52 data points
2025-06-24 11:45:08,046 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 11:51:57,566 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:51:57,567 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 11:51:57,567 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:52:00,333 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:52:00,333 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(pd.subcription_payment_details_id)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10'}
2025-06-24 11:52:00,333 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / C...
2025-06-24 11:52:00,334 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:52:00,334 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(pd.subcription_payment_details_id)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10
2025-06-24 11:52:00,334 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / C...
2025-06-24 11:52:03,460 - api_server - INFO - ✅ Query executed successfully, returned 10 rows
2025-06-24 11:52:03,715 - api_server - INFO - ✅ Dynamic SQL completed successfully with 10 rows
2025-06-24 11:52:03,716 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.38s
2025-06-24 11:52:03,833 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:52:03,833 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'merchant_user_id': '1705538300', 'success_rate': 92.5}, {'merchant_user_id': '1705537655', 'success_rate': 90.91}, {'merchant_user_id': '1705490261', 'success_rate': 81.25}, {'merchant_user_id': '1705544966', 'success_rate': 81.25}, {'merchant_user_id': '1001561217', 'success_rate': 80.0}, {'merchant_user_id': '1705465232', 'success_rate': 80.0}, {'merchant_user_id': '1001656012', 'success_rate': 76.47}, {'merchant_user_id': '1002576833', 'success_rate': 66.67}, {'merchant_user_id': '1700428205', 'success_rate': 62.5}, {'merchant_user_id': '1700701136', 'success_rate': 59.04}], 'graph_type': 'bar'}
2025-06-24 11:52:03,833 - api_server - INFO - 📊 Generated bar graph with 10 data points
2025-06-24 11:52:03,833 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 11:54:12,424 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:54:12,424 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 11:54:12,424 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:54:20,960 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:54:20,960 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(pd.subcription_payment_details_id)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10'}
2025-06-24 11:54:20,960 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / C...
2025-06-24 11:54:20,961 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:54:20,961 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(pd.subcription_payment_details_id)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10
2025-06-24 11:54:20,961 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / C...
2025-06-24 11:54:23,907 - api_server - INFO - ✅ Query executed successfully, returned 10 rows
2025-06-24 11:54:24,157 - api_server - INFO - ✅ Dynamic SQL completed successfully with 10 rows
2025-06-24 11:54:24,158 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.20s
2025-06-24 11:54:24,255 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:54:24,255 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'merchant_user_id': '1705538300', 'success_rate': 92.5}, {'merchant_user_id': '1705537655', 'success_rate': 90.91}, {'merchant_user_id': '1705490261', 'success_rate': 81.25}, {'merchant_user_id': '1705544966', 'success_rate': 81.25}, {'merchant_user_id': '1001561217', 'success_rate': 80.0}, {'merchant_user_id': '1705465232', 'success_rate': 80.0}, {'merchant_user_id': '1001656012', 'success_rate': 76.47}, {'merchant_user_id': '1002576833', 'success_rate': 66.67}, {'merchant_user_id': '1700428205', 'success_rate': 62.5}, {'merchant_user_id': '1700701136', 'success_rate': 59.04}], 'graph_type': 'bar'}
2025-06-24 11:54:24,255 - api_server - INFO - 📊 Generated bar graph with 10 data points
2025-06-24 11:54:24,255 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 11:56:03,854 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:56:03,855 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 11:56:03,855 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 11:56:11,756 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:56:11,757 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date"}
2025-06-24 11:56:11,757 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM sub...
2025-06-24 11:56:11,757 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:56:11,757 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date
2025-06-24 11:56:11,758 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM sub...
2025-06-24 11:56:14,590 - api_server - INFO - ✅ Query executed successfully, returned 52 rows
2025-06-24 11:56:14,841 - api_server - INFO - ✅ Dynamic SQL completed successfully with 52 rows
2025-06-24 11:56:14,841 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.08s
2025-06-24 11:56:14,944 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:56:14,944 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_date': '2025-04-01', 'total_payments': 30}, {'payment_date': '2025-04-02', 'total_payments': 60}, {'payment_date': '2025-04-03', 'total_payments': 26}, {'payment_date': '2025-04-04', 'total_payments': 35}, {'payment_date': '2025-04-07', 'total_payments': 27}, {'payment_date': '2025-04-08', 'total_payments': 54}, {'payment_date': '2025-04-09', 'total_payments': 60}, {'payment_date': '2025-04-10', 'total_payments': 51}, {'payment_date': '2025-04-11', 'total_payments': 56}, {'payment_date': '2025-04-14', 'total_payments': 27}, {'payment_date': '2025-04-15', 'total_payments': 26}, {'payment_date': '2025-04-16', 'total_payments': 78}, {'payment_date': '2025-04-17', 'total_payments': 58}, {'payment_date': '2025-04-18', 'total_payments': 41}, {'payment_date': '2025-04-21', 'total_payments': 46}, {'payment_date': '2025-04-22', 'total_payments': 45}, {'payment_date': '2025-04-23', 'total_payments': 70}, {'payment_date': '2025-04-24', 'total_payments': 39}, {'payment_date': '2025-04-25', 'total_payments': 73}, {'payment_date': '2025-04-28', 'total_payments': 58}, {'payment_date': '2025-04-29', 'total_payments': 65}, {'payment_date': '2025-04-30', 'total_payments': 48}, {'payment_date': '2025-05-01', 'total_payments': 27}, {'payment_date': '2025-05-02', 'total_payments': 24}, {'payment_date': '2025-05-03', 'total_payments': 6}, {'payment_date': '2025-05-05', 'total_payments': 58}, {'payment_date': '2025-05-06', 'total_payments': 78}, {'payment_date': '2025-05-07', 'total_payments': 82}, {'payment_date': '2025-05-08', 'total_payments': 36}, {'payment_date': '2025-05-09', 'total_payments': 74}, {'payment_date': '2025-05-12', 'total_payments': 23}, {'payment_date': '2025-05-13', 'total_payments': 66}, {'payment_date': '2025-05-14', 'total_payments': 78}, {'payment_date': '2025-05-15', 'total_payments': 79}, {'payment_date': '2025-05-16', 'total_payments': 61}, {'payment_date': '2025-05-19', 'total_payments': 78}, {'payment_date': '2025-05-20', 'total_payments': 82}, {'payment_date': '2025-05-21', 'total_payments': 66}, {'payment_date': '2025-05-22', 'total_payments': 103}, {'payment_date': '2025-05-23', 'total_payments': 72}, {'payment_date': '2025-05-24', 'total_payments': 4}, {'payment_date': '2025-05-26', 'total_payments': 67}, {'payment_date': '2025-05-27', 'total_payments': 62}, {'payment_date': '2025-05-28', 'total_payments': 52}, {'payment_date': '2025-05-29', 'total_payments': 97}, {'payment_date': '2025-05-30', 'total_payments': 63}, {'payment_date': '2025-06-02', 'total_payments': 78}, {'payment_date': '2025-06-03', 'total_payments': 66}, {'payment_date': '2025-06-04', 'total_payments': 63}, {'payment_date': '2025-06-05', 'total_payments': 62}, {'payment_date': '2025-06-06', 'total_payments': 51}, {'payment_date': '2025-06-09', 'total_payments': 9}], 'graph_type': 'line'}
2025-06-24 11:56:14,944 - api_server - INFO - 📊 Generated line graph with 52 data points
2025-06-24 11:56:14,944 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 11:56:38,858 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 11:56:38,858 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'Chart showing payment trends over time', 'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date", 'was_helpful': False, 'improvement_suggestion': 'the years on the x axis are overlapping each other'}
2025-06-24 11:56:38,858 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 11:56:38,895 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 11:56:38,895 - api_server - INFO - 💡 Improvement suggestion recorded: the years on the x axis are overlapping each other...
2025-06-24 11:56:39,009 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 11:56:39,009 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.15s
2025-06-24 11:56:39,091 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 11:56:39,091 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 11:56:39,102 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 11:56:39,103 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 11:56:41,722 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 11:56:41,723 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 11:56:41,747 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 11:56:41,747 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 11:56:43,269 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 11:56:43,269 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month"}
2025-06-24 11:56:43,269 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 11:56:43,270 - api_server - INFO - ✅ SQL validation passed
2025-06-24 11:56:43,270 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month
2025-06-24 11:56:43,270 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 11:56:46,009 - api_server - INFO - ✅ Query executed successfully, returned 3 rows
2025-06-24 11:56:46,258 - api_server - INFO - ✅ Dynamic SQL completed successfully with 3 rows
2025-06-24 11:56:46,258 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 2.99s
2025-06-24 11:56:46,362 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 11:56:46,362 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_month': '2025-04', 'total_payments': 1073}, {'payment_month': '2025-05', 'total_payments': 1438}, {'payment_month': '2025-06', 'total_payments': 329}], 'graph_type': 'line'}
2025-06-24 11:56:46,363 - api_server - WARNING - Tool generate_graph_data returned error: Graph type 'line' not suitable for this data
2025-06-24 12:00:01,132 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:00:01,134 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 12:00:01,160 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 12:00:01,160 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.03s
2025-06-24 12:00:04,400 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:00:04,400 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month"}
2025-06-24 12:00:04,400 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 12:00:04,401 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:00:04,401 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month
2025-06-24 12:00:04,401 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 12:00:07,305 - api_server - INFO - ✅ Query executed successfully, returned 3 rows
2025-06-24 12:00:07,558 - api_server - INFO - ✅ Dynamic SQL completed successfully with 3 rows
2025-06-24 12:00:07,558 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.16s
2025-06-24 12:00:07,656 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:00:07,656 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_month': '2025-04', 'total_payments': 1073}, {'payment_month': '2025-05', 'total_payments': 1438}, {'payment_month': '2025-06', 'total_payments': 329}], 'graph_type': 'line'}
2025-06-24 12:00:07,656 - api_server - WARNING - Tool generate_graph_data returned error: Graph type 'line' not suitable for this data
2025-06-24 12:00:48,618 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:00:48,620 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': "• What's the payment success rate for the last month? (will use pre-built tool)"}
2025-06-24 12:00:48,644 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:00:48,644 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.03s
2025-06-24 12:00:49,827 - api_server - INFO - 🔧 Tool execution request: get_payment_success_rate_in_last_days
2025-06-24 12:00:49,827 - api_server - INFO - ⚙️ Executing get_payment_success_rate_in_last_days with parameters: {'days': 30.0}
2025-06-24 12:00:49,827 - api_server - INFO - 🔍 Executing query: 
        SELECT 
            COUNT(*) as total_payments,
            SUM(CASE WHEN status = 'ACTIVE'...
2025-06-24 12:00:52,994 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:00:53,242 - api_server - INFO - ✅ Tool get_payment_success_rate_in_last_days completed successfully in 3.41s
2025-06-24 12:00:53,336 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:00:53,336 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': '• Show me payment history for user abc123 (will use pre-built tool)'}
2025-06-24 12:00:53,346 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:00:53,346 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.01s
2025-06-24 12:00:54,409 - api_server - INFO - 🔧 Tool execution request: get_user_payment_history
2025-06-24 12:00:54,410 - api_server - INFO - ⚙️ Executing get_user_payment_history with parameters: {'merchant_user_id': 'abc123'}
2025-06-24 12:00:54,411 - api_server - INFO - 🔍 Executing query: 
        SELECT 
            spd.created_date as payment_date,
            spd.trans_amount_decimal ...
2025-06-24 12:00:57,892 - api_server - INFO - ✅ Query executed successfully, returned 0 rows
2025-06-24 12:00:58,145 - api_server - INFO - ✅ Tool get_user_payment_history completed successfully in 3.74s
2025-06-24 12:00:58,241 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:00:58,241 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': '• Compare April vs May subscriptions (will use dynamic SQL)'}
2025-06-24 12:00:58,251 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:00:58,251 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.01s
2025-06-24 12:01:00,122 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:01:00,123 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions'}
2025-06-24 12:01:00,123 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 12:01:00,123 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:01:00,123 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions
2025-06-24 12:01:00,123 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 12:01:02,903 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:01:03,163 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:01:03,164 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.04s
2025-06-24 12:01:03,261 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:01:03,261 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': '🎨 Auto-open graphs when generated? (y/n, default: y): Chart showing payment trends over time'}
2025-06-24 12:01:03,272 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:01:03,273 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.01s
2025-06-24 12:01:04,815 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:01:04,815 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT DATE_FORMAT(pd.created_date, "%Y-%m-%d") AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date'}
2025-06-24 12:01:04,815 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, "%Y-%m-%d") AS payment_date, COUNT(*) AS total_payments FROM sub...
2025-06-24 12:01:04,815 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:01:04,815 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, "%Y-%m-%d") AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_date ORDER BY payment_date
2025-06-24 12:01:04,816 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, "%Y-%m-%d") AS payment_date, COUNT(*) AS total_payments FROM sub...
2025-06-24 12:01:07,471 - api_server - INFO - ✅ Query executed successfully, returned 52 rows
2025-06-24 12:01:07,722 - api_server - INFO - ✅ Dynamic SQL completed successfully with 52 rows
2025-06-24 12:01:07,723 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 2.91s
2025-06-24 12:01:07,821 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:01:07,821 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_date': '2025-04-01', 'total_payments': 30}, {'payment_date': '2025-04-02', 'total_payments': 60}, {'payment_date': '2025-04-03', 'total_payments': 26}, {'payment_date': '2025-04-04', 'total_payments': 35}, {'payment_date': '2025-04-07', 'total_payments': 27}, {'payment_date': '2025-04-08', 'total_payments': 54}, {'payment_date': '2025-04-09', 'total_payments': 60}, {'payment_date': '2025-04-10', 'total_payments': 51}, {'payment_date': '2025-04-11', 'total_payments': 56}, {'payment_date': '2025-04-14', 'total_payments': 27}, {'payment_date': '2025-04-15', 'total_payments': 26}, {'payment_date': '2025-04-16', 'total_payments': 78}, {'payment_date': '2025-04-17', 'total_payments': 58}, {'payment_date': '2025-04-18', 'total_payments': 41}, {'payment_date': '2025-04-21', 'total_payments': 46}, {'payment_date': '2025-04-22', 'total_payments': 45}, {'payment_date': '2025-04-23', 'total_payments': 70}, {'payment_date': '2025-04-24', 'total_payments': 39}, {'payment_date': '2025-04-25', 'total_payments': 73}, {'payment_date': '2025-04-28', 'total_payments': 58}, {'payment_date': '2025-04-29', 'total_payments': 65}, {'payment_date': '2025-04-30', 'total_payments': 48}, {'payment_date': '2025-05-01', 'total_payments': 27}, {'payment_date': '2025-05-02', 'total_payments': 24}, {'payment_date': '2025-05-03', 'total_payments': 6}, {'payment_date': '2025-05-05', 'total_payments': 58}, {'payment_date': '2025-05-06', 'total_payments': 78}, {'payment_date': '2025-05-07', 'total_payments': 82}, {'payment_date': '2025-05-08', 'total_payments': 36}, {'payment_date': '2025-05-09', 'total_payments': 74}, {'payment_date': '2025-05-12', 'total_payments': 23}, {'payment_date': '2025-05-13', 'total_payments': 66}, {'payment_date': '2025-05-14', 'total_payments': 78}, {'payment_date': '2025-05-15', 'total_payments': 79}, {'payment_date': '2025-05-16', 'total_payments': 61}, {'payment_date': '2025-05-19', 'total_payments': 78}, {'payment_date': '2025-05-20', 'total_payments': 82}, {'payment_date': '2025-05-21', 'total_payments': 66}, {'payment_date': '2025-05-22', 'total_payments': 103}, {'payment_date': '2025-05-23', 'total_payments': 72}, {'payment_date': '2025-05-24', 'total_payments': 4}, {'payment_date': '2025-05-26', 'total_payments': 67}, {'payment_date': '2025-05-27', 'total_payments': 62}, {'payment_date': '2025-05-28', 'total_payments': 52}, {'payment_date': '2025-05-29', 'total_payments': 97}, {'payment_date': '2025-05-30', 'total_payments': 63}, {'payment_date': '2025-06-02', 'total_payments': 78}, {'payment_date': '2025-06-03', 'total_payments': 66}, {'payment_date': '2025-06-04', 'total_payments': 63}, {'payment_date': '2025-06-05', 'total_payments': 62}, {'payment_date': '2025-06-06', 'total_payments': 51}, {'payment_date': '2025-06-09', 'total_payments': 9}], 'graph_type': 'line'}
2025-06-24 12:01:07,822 - api_server - INFO - 📊 Generated line graph with 52 data points
2025-06-24 12:01:07,822 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 12:01:33,200 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:01:33,201 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 12:01:33,227 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 12:01:33,228 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.03s
2025-06-24 12:01:36,254 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:01:36,254 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month"}
2025-06-24 12:01:36,255 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 12:01:36,255 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:01:36,255 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month
2025-06-24 12:01:36,255 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 12:01:38,961 - api_server - INFO - ✅ Query executed successfully, returned 3 rows
2025-06-24 12:01:39,217 - api_server - INFO - ✅ Dynamic SQL completed successfully with 3 rows
2025-06-24 12:01:39,217 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 2.96s
2025-06-24 12:01:39,317 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:01:39,317 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_month': '2025-04', 'total_payments': 1073}, {'payment_month': '2025-05', 'total_payments': 1438}, {'payment_month': '2025-06', 'total_payments': 329}], 'graph_type': 'line'}
2025-06-24 12:01:39,317 - api_server - WARNING - Tool generate_graph_data returned error: Graph type 'line' not suitable for this data
2025-06-24 12:04:09,359 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:04:09,360 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 12:04:09,386 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 12:04:09,386 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.03s
2025-06-24 12:04:11,318 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:04:11,318 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month"}
2025-06-24 12:04:11,318 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 12:04:11,318 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:04:11,318 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subscription_payment_details AS pd GROUP BY payment_month ORDER BY payment_month
2025-06-24 12:04:11,319 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m') AS payment_month, COUNT(*) AS total_payments FROM subsc...
2025-06-24 12:04:14,180 - api_server - INFO - ✅ Query executed successfully, returned 3 rows
2025-06-24 12:04:14,435 - api_server - INFO - ✅ Dynamic SQL completed successfully with 3 rows
2025-06-24 12:04:14,436 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.12s
2025-06-24 12:04:14,552 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:04:14,552 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_month': '2025-04', 'total_payments': 1073}, {'payment_month': '2025-05', 'total_payments': 1438}, {'payment_month': '2025-06', 'total_payments': 329}], 'graph_type': 'line'}
2025-06-24 12:04:14,552 - api_server - WARNING - Tool generate_graph_data returned error: Graph type 'line' not suitable for this data
2025-06-24 12:09:59,495 - api_server - INFO - 🛑 Shutting down Enhanced API Server
2025-06-24 12:10:01,789 - faiss.loader - INFO - Loading faiss.
2025-06-24 12:10:01,800 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-24 12:10:01,803 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-24 12:10:05,588 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-24 12:10:05,588 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 12:10:06,289 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 12:10:06,291 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 12:10:06,293 - __main__ - INFO - 🚀 Starting ENHANCED RENDER.COM server on port 8000
2025-06-24 12:10:06,293 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-24 12:10:06,293 - __main__ - INFO - 🧠 Full semantic learning support enabled
2025-06-24 12:10:06,293 - __main__ - INFO - 💡 Enhanced feedback system with improvement suggestions enabled
2025-06-24 12:10:06,293 - __main__ - INFO - 📊 NEW: Graph generation capabilities enabled
2025-06-24 12:10:06,334 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-24 12:10:06,334 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 12:10:06,383 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 12:10:06,384 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 12:10:06,386 - api_server - INFO - 🚀 Starting ENHANCED Subscription Analytics API Server with Graph Generation
2025-06-24 12:10:06,386 - api_server - INFO - Semantic learning: enabled
2025-06-24 12:10:06,387 - api_server - INFO - Available tools: 9 (including graph generation)
2025-06-24 12:11:06,841 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:11:06,841 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Chart showing payment trends over time'}
2025-06-24 12:11:06,841 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 12:11:09,782 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:11:09,782 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT DATE(spd.created_date) AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS spd GROUP BY payment_date ORDER BY payment_date'}
2025-06-24 12:11:09,782 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE(spd.created_date) AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_...
2025-06-24 12:11:09,783 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:11:09,784 - api_server - INFO - 🔍 Executing: SELECT DATE(spd.created_date) AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS spd GROUP BY payment_date ORDER BY payment_date
2025-06-24 12:11:09,784 - api_server - INFO - 🔍 Executing query: SELECT DATE(spd.created_date) AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_...
2025-06-24 12:11:10,998 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-24 12:11:10,999 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-24 12:11:10,999 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-24 12:11:12,648 - api_server - INFO - ✅ Query executed successfully, returned 52 rows
2025-06-24 12:11:12,908 - api_server - INFO - ✅ Dynamic SQL completed successfully with 52 rows
2025-06-24 12:11:12,909 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.13s
2025-06-24 12:11:13,011 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:11:13,011 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_date': '2025-04-01', 'total_payments': 30}, {'payment_date': '2025-04-02', 'total_payments': 60}, {'payment_date': '2025-04-03', 'total_payments': 26}, {'payment_date': '2025-04-04', 'total_payments': 35}, {'payment_date': '2025-04-07', 'total_payments': 27}, {'payment_date': '2025-04-08', 'total_payments': 54}, {'payment_date': '2025-04-09', 'total_payments': 60}, {'payment_date': '2025-04-10', 'total_payments': 51}, {'payment_date': '2025-04-11', 'total_payments': 56}, {'payment_date': '2025-04-14', 'total_payments': 27}, {'payment_date': '2025-04-15', 'total_payments': 26}, {'payment_date': '2025-04-16', 'total_payments': 78}, {'payment_date': '2025-04-17', 'total_payments': 58}, {'payment_date': '2025-04-18', 'total_payments': 41}, {'payment_date': '2025-04-21', 'total_payments': 46}, {'payment_date': '2025-04-22', 'total_payments': 45}, {'payment_date': '2025-04-23', 'total_payments': 70}, {'payment_date': '2025-04-24', 'total_payments': 39}, {'payment_date': '2025-04-25', 'total_payments': 73}, {'payment_date': '2025-04-28', 'total_payments': 58}, {'payment_date': '2025-04-29', 'total_payments': 65}, {'payment_date': '2025-04-30', 'total_payments': 48}, {'payment_date': '2025-05-01', 'total_payments': 27}, {'payment_date': '2025-05-02', 'total_payments': 24}, {'payment_date': '2025-05-03', 'total_payments': 6}, {'payment_date': '2025-05-05', 'total_payments': 58}, {'payment_date': '2025-05-06', 'total_payments': 78}, {'payment_date': '2025-05-07', 'total_payments': 82}, {'payment_date': '2025-05-08', 'total_payments': 36}, {'payment_date': '2025-05-09', 'total_payments': 74}, {'payment_date': '2025-05-12', 'total_payments': 23}, {'payment_date': '2025-05-13', 'total_payments': 66}, {'payment_date': '2025-05-14', 'total_payments': 78}, {'payment_date': '2025-05-15', 'total_payments': 79}, {'payment_date': '2025-05-16', 'total_payments': 61}, {'payment_date': '2025-05-19', 'total_payments': 78}, {'payment_date': '2025-05-20', 'total_payments': 82}, {'payment_date': '2025-05-21', 'total_payments': 66}, {'payment_date': '2025-05-22', 'total_payments': 103}, {'payment_date': '2025-05-23', 'total_payments': 72}, {'payment_date': '2025-05-24', 'total_payments': 4}, {'payment_date': '2025-05-26', 'total_payments': 67}, {'payment_date': '2025-05-27', 'total_payments': 62}, {'payment_date': '2025-05-28', 'total_payments': 52}, {'payment_date': '2025-05-29', 'total_payments': 97}, {'payment_date': '2025-05-30', 'total_payments': 63}, {'payment_date': '2025-06-02', 'total_payments': 78}, {'payment_date': '2025-06-03', 'total_payments': 66}, {'payment_date': '2025-06-04', 'total_payments': 63}, {'payment_date': '2025-06-05', 'total_payments': 62}, {'payment_date': '2025-06-06', 'total_payments': 51}, {'payment_date': '2025-06-09', 'total_payments': 9}], 'graph_type': 'line'}
2025-06-24 12:11:13,011 - api_server - INFO - 📊 Generated line graph with 52 data points
2025-06-24 12:11:13,011 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 12:11:24,148 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:11:24,148 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'Chart showing payment trends over time', 'sql_query': 'SELECT DATE(spd.created_date) AS payment_date, COUNT(*) AS total_payments FROM subscription_payment_details AS spd GROUP BY payment_date ORDER BY payment_date', 'was_helpful': True}
2025-06-24 12:11:24,148 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 12:11:24,186 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:11:24,283 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 12:11:24,283 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.13s
2025-06-24 12:11:44,709 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:11:44,709 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare success rates and failure rates over one month and visualize them'}
2025-06-24 12:11:44,732 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:11:44,732 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:11:47,100 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:11:47,101 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "ACTIVE" AND MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE())) AS april_success, (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "ACTIVE" AND MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_success, (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "FAILED" AND MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE())) AS april_failed, (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "FAILED" AND MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_failed'}
2025-06-24 12:11:47,101 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "ACTIVE" AND MONTH(created_...
2025-06-24 12:11:47,101 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:11:47,102 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "ACTIVE" AND MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE())) AS april_success, (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "ACTIVE" AND MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_success, (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "FAILED" AND MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE())) AS april_failed, (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "FAILED" AND MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_failed
2025-06-24 12:11:47,102 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(*) FROM subscription_payment_details WHERE status = "ACTIVE" AND MONTH(created_...
2025-06-24 12:11:49,852 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:11:50,103 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:11:50,104 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.00s
2025-06-24 12:13:46,640 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:13:46,641 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'visualize subscriptions in the past montg'}
2025-06-24 12:13:46,660 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:13:46,660 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:13:48,440 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:13:48,440 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': "SELECT DATE_FORMAT(sc.subcription_start_date, '%Y-%m-%d') AS subscription_date, COUNT(*) AS daily_subscriptions FROM subscription_contract_v2 AS sc WHERE sc.subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY subscription_date ORDER BY subscription_date"}
2025-06-24 12:13:48,441 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(sc.subcription_start_date, '%Y-%m-%d') AS subscription_date, COUNT(*) AS daily_su...
2025-06-24 12:13:48,441 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:13:48,441 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(sc.subcription_start_date, '%Y-%m-%d') AS subscription_date, COUNT(*) AS daily_subscriptions FROM subscription_contract_v2 AS sc WHERE sc.subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY subscription_date ORDER BY subscription_date
2025-06-24 12:13:48,441 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(sc.subcription_start_date, '%Y-%m-%d') AS subscription_date, COUNT(*) AS daily_su...
2025-06-24 12:13:51,315 - api_server - INFO - ✅ Query executed successfully, returned 11 rows
2025-06-24 12:13:51,567 - api_server - INFO - ✅ Dynamic SQL completed successfully with 11 rows
2025-06-24 12:13:51,568 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.13s
2025-06-24 12:13:51,673 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:13:51,673 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'subscription_date': '2025-05-26', 'daily_subscriptions': 62}, {'subscription_date': '2025-05-27', 'daily_subscriptions': 54}, {'subscription_date': '2025-05-28', 'daily_subscriptions': 39}, {'subscription_date': '2025-05-29', 'daily_subscriptions': 92}, {'subscription_date': '2025-05-30', 'daily_subscriptions': 62}, {'subscription_date': '2025-06-02', 'daily_subscriptions': 76}, {'subscription_date': '2025-06-03', 'daily_subscriptions': 62}, {'subscription_date': '2025-06-04', 'daily_subscriptions': 62}, {'subscription_date': '2025-06-05', 'daily_subscriptions': 55}, {'subscription_date': '2025-06-06', 'daily_subscriptions': 49}, {'subscription_date': '2025-06-09', 'daily_subscriptions': 7}], 'graph_type': 'line'}
2025-06-24 12:13:51,673 - api_server - INFO - 📊 Generated line graph with 11 data points
2025-06-24 12:13:51,673 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 12:14:17,736 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:14:17,736 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'visualize subscriptions in the past montg', 'sql_query': "SELECT DATE_FORMAT(sc.subcription_start_date, '%Y-%m-%d') AS subscription_date, COUNT(*) AS daily_subscriptions FROM subscription_contract_v2 AS sc WHERE sc.subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY subscription_date ORDER BY subscription_date", 'was_helpful': True}
2025-06-24 12:14:17,737 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 12:14:17,753 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:14:17,846 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 12:14:17,846 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:14:29,632 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:14:29,632 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'visualize payment rates in the past month'}
2025-06-24 12:14:29,648 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:14:29,649 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:14:31,540 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:14:31,541 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT DATE_FORMAT(pd.created_date, \'%Y-%m-%d\') AS payment_date, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS payment_success_rate FROM subscription_payment_details AS pd WHERE pd.created_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY payment_date ORDER BY payment_date'}
2025-06-24 12:14:31,541 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments, SUM(CAS...
2025-06-24 12:14:31,541 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:14:31,541 - api_server - INFO - 🔍 Executing: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS payment_success_rate FROM subscription_payment_details AS pd WHERE pd.created_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY payment_date ORDER BY payment_date
2025-06-24 12:14:31,542 - api_server - INFO - 🔍 Executing query: SELECT DATE_FORMAT(pd.created_date, '%Y-%m-%d') AS payment_date, COUNT(*) AS total_payments, SUM(CAS...
2025-06-24 12:14:36,949 - api_server - INFO - ✅ Query executed successfully, returned 11 rows
2025-06-24 12:14:37,226 - api_server - INFO - ✅ Dynamic SQL completed successfully with 11 rows
2025-06-24 12:14:37,227 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 5.69s
2025-06-24 12:14:37,329 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 12:14:37,330 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'payment_date': '2025-05-26', 'total_payments': 67, 'successful_payments': 19.0, 'payment_success_rate': 28.36}, {'payment_date': '2025-05-27', 'total_payments': 62, 'successful_payments': 13.0, 'payment_success_rate': 20.97}, {'payment_date': '2025-05-28', 'total_payments': 52, 'successful_payments': 14.0, 'payment_success_rate': 26.92}, {'payment_date': '2025-05-29', 'total_payments': 97, 'successful_payments': 5.0, 'payment_success_rate': 5.15}, {'payment_date': '2025-05-30', 'total_payments': 63, 'successful_payments': 3.0, 'payment_success_rate': 4.76}, {'payment_date': '2025-06-02', 'total_payments': 78, 'successful_payments': 12.0, 'payment_success_rate': 15.38}, {'payment_date': '2025-06-03', 'total_payments': 66, 'successful_payments': 17.0, 'payment_success_rate': 25.76}, {'payment_date': '2025-06-04', 'total_payments': 63, 'successful_payments': 1.0, 'payment_success_rate': 1.59}, {'payment_date': '2025-06-05', 'total_payments': 62, 'successful_payments': 7.0, 'payment_success_rate': 11.29}, {'payment_date': '2025-06-06', 'total_payments': 51, 'successful_payments': 0.0, 'payment_success_rate': 0.0}, {'payment_date': '2025-06-09', 'total_payments': 9, 'successful_payments': 3.0, 'payment_success_rate': 33.33}], 'graph_type': 'line'}
2025-06-24 12:14:37,330 - api_server - INFO - 📊 Generated line graph with 11 data points
2025-06-24 12:14:37,330 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 12:14:59,806 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:14:59,808 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'visualize payment rates in the past month', 'sql_query': 'SELECT DATE_FORMAT(pd.created_date, \'%Y-%m-%d\') AS payment_date, COUNT(*) AS total_payments, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS payment_success_rate FROM subscription_payment_details AS pd WHERE pd.created_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY payment_date ORDER BY payment_date', 'was_helpful': True}
2025-06-24 12:14:59,808 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 12:14:59,825 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:14:59,951 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 12:14:59,951 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.14s
2025-06-24 12:15:04,037 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:15:04,038 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare the two'}
2025-06-24 12:15:04,052 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:15:04,052 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.01s
2025-06-24 12:15:06,240 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:15:06,241 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS April_Subscriptions, (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS May_Subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE()) AND status = "ACTIVE") AS April_Successful_Payments, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE()) AND status = "ACTIVE") AS May_Successful_Payments'}
2025-06-24 12:15:06,241 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YE...
2025-06-24 12:15:06,241 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:15:06,241 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS April_Subscriptions, (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS May_Subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE()) AND status = "ACTIVE") AS April_Successful_Payments, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE()) AND status = "ACTIVE") AS May_Successful_Payments
2025-06-24 12:15:06,242 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YE...
2025-06-24 12:15:10,773 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:15:11,332 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:15:11,332 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 5.09s
2025-06-24 12:15:24,589 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:15:24,590 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare the two', 'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS April_Subscriptions, (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS May_Subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE()) AND status = "ACTIVE") AS April_Successful_Payments, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE()) AND status = "ACTIVE") AS May_Successful_Payments', 'was_helpful': False, 'improvement_suggestion': 'along with graph also show me details'}
2025-06-24 12:15:24,590 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 12:15:24,605 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:15:24,605 - api_server - INFO - 💡 Improvement suggestion recorded: along with graph also show me details...
2025-06-24 12:15:24,697 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 12:15:24,697 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:15:24,773 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 12:15:24,773 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare the two'}
2025-06-24 12:15:24,780 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 12:15:24,780 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 12:15:28,602 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:15:28,602 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare the two'}
2025-06-24 12:15:28,616 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 12:15:28,617 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:15:31,051 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:15:31,052 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS April_Subscriptions, (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS May_Subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE()) AND STATUS = "ACTIVE") AS April_Successful_Payments, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE()) AND STATUS = "ACTIVE") AS May_Successful_Payments'}
2025-06-24 12:15:31,052 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YE...
2025-06-24 12:15:31,052 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:15:31,052 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS April_Subscriptions, (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS May_Subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE()) AND STATUS = "ACTIVE") AS April_Successful_Payments, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE()) AND STATUS = "ACTIVE") AS May_Successful_Payments
2025-06-24 12:15:31,052 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YE...
2025-06-24 12:15:34,925 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:15:35,370 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:15:35,371 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 4.32s
2025-06-24 12:15:45,427 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:15:45,427 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare the two', 'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 4 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS April_Subscriptions, (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS May_Subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 4 AND YEAR(created_date) = YEAR(CURDATE()) AND STATUS = "ACTIVE") AS April_Successful_Payments, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE()) AND STATUS = "ACTIVE") AS May_Successful_Payments', 'was_helpful': False}
2025-06-24 12:15:45,427 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 12:15:45,441 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:15:45,534 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 12:15:45,534 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:15:45,610 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 12:15:45,610 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare the two'}
2025-06-24 12:15:45,616 - api_server - INFO - 🔍 Found 2 similar queries for analysis
2025-06-24 12:15:45,616 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 12:16:00,888 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:16:00,888 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare the subscriptions and payments in the last month'}
2025-06-24 12:16:00,904 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:16:00,904 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:16:04,074 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:16:04,074 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT \n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(sc.subcription_start_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)) AS last_month_subscriptions,\n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = MONTH(CURDATE()) AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS current_month_subscriptions,\n    (SELECT COUNT(*) \n     FROM subscription_payment_details AS spd\n     WHERE MONTH(spd.created_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(spd.created_date) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND spd.status = "ACTIVE") AS last_month_successful_payments,\n    (SELECT COUNT(*) \n     FROM subscription_payment_details AS spd\n     WHERE MONTH(spd.created_date) = MONTH(CURDATE()) AND YEAR(spd.created_date) = YEAR(CURDATE()) AND spd.status = "ACTIVE") AS current_month_successful_payments'}
2025-06-24 12:16:04,074 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT 
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
  ...
2025-06-24 12:16:04,075 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:16:04,075 - api_server - INFO - 🔍 Executing: SELECT 
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
     WHERE MONTH(sc.subcription_start_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(sc.subcription_start_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)) AS last_month_subscriptions,
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
     WHERE MONTH(sc.subcription_start_date) = MONTH(CURDATE()) AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS current_month_subscriptions,
    (SELECT COUNT(*) 
     FROM subscription_payment_details AS spd
     WHERE MONTH(spd.created_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(spd.created_date) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND spd.status = "ACTIVE") AS last_month_successful_payments,
    (SELECT COUNT(*) 
     FROM subscription_payment_details AS spd
     WHERE MONTH(spd.created_date) = MONTH(CURDATE()) AND YEAR(spd.created_date) = YEAR(CURDATE()) AND spd.status = "ACTIVE") AS current_month_successful_payments
2025-06-24 12:16:04,075 - api_server - INFO - 🔍 Executing query: SELECT 
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
  ...
2025-06-24 12:16:06,942 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:16:07,198 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:16:07,199 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.13s
2025-06-24 12:16:17,362 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:16:17,362 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare the subscriptions and payments in the last month', 'sql_query': 'SELECT \n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(sc.subcription_start_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)) AS last_month_subscriptions,\n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = MONTH(CURDATE()) AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS current_month_subscriptions,\n    (SELECT COUNT(*) \n     FROM subscription_payment_details AS spd\n     WHERE MONTH(spd.created_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(spd.created_date) = YEAR(CURDATE() - INTERVAL 1 MONTH) AND spd.status = "ACTIVE") AS last_month_successful_payments,\n    (SELECT COUNT(*) \n     FROM subscription_payment_details AS spd\n     WHERE MONTH(spd.created_date) = MONTH(CURDATE()) AND YEAR(spd.created_date) = YEAR(CURDATE()) AND spd.status = "ACTIVE") AS current_month_successful_payments', 'was_helpful': False, 'improvement_suggestion': 'i didnt ask for graph'}
2025-06-24 12:16:17,363 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 12:16:17,377 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:16:17,377 - api_server - INFO - 💡 Improvement suggestion recorded: i didnt ask for graph...
2025-06-24 12:16:17,469 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 12:16:17,469 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:16:17,545 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 12:16:17,545 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare the subscriptions and payments in the last month'}
2025-06-24 12:16:17,552 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 12:16:17,552 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 12:16:22,573 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:16:22,573 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'try again'}
2025-06-24 12:16:22,588 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:16:22,589 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:16:25,377 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:16:25,377 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT \n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS april_subscriptions,\n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions,\n    (SELECT COUNT(DISTINCT pd.subcription_payment_details_id) \n     FROM subscription_payment_details AS pd \n     WHERE MONTH(pd.created_date) = 4 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS april_payments,\n    (SELECT COUNT(DISTINCT pd.subcription_payment_details_id) \n     FROM subscription_payment_details AS pd \n     WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS may_payments'}
2025-06-24 12:16:25,378 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT 
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
  ...
2025-06-24 12:16:25,378 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:16:25,378 - api_server - INFO - 🔍 Executing: SELECT 
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
     WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS april_subscriptions,
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
     WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions,
    (SELECT COUNT(DISTINCT pd.subcription_payment_details_id) 
     FROM subscription_payment_details AS pd 
     WHERE MONTH(pd.created_date) = 4 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS april_payments,
    (SELECT COUNT(DISTINCT pd.subcription_payment_details_id) 
     FROM subscription_payment_details AS pd 
     WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS may_payments
2025-06-24 12:16:25,378 - api_server - INFO - 🔍 Executing query: SELECT 
    (SELECT COUNT(DISTINCT sc.subscription_id) 
     FROM subscription_contract_v2 AS sc 
  ...
2025-06-24 12:16:28,148 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:16:28,404 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:16:28,405 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.03s
2025-06-24 12:16:34,868 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:16:34,869 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'try again', 'sql_query': 'SELECT \n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS april_subscriptions,\n    (SELECT COUNT(DISTINCT sc.subscription_id) \n     FROM subscription_contract_v2 AS sc \n     WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions,\n    (SELECT COUNT(DISTINCT pd.subcription_payment_details_id) \n     FROM subscription_payment_details AS pd \n     WHERE MONTH(pd.created_date) = 4 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS april_payments,\n    (SELECT COUNT(DISTINCT pd.subcription_payment_details_id) \n     FROM subscription_payment_details AS pd \n     WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS may_payments', 'was_helpful': True}
2025-06-24 12:16:34,869 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 12:16:34,884 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:16:34,977 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 12:16:34,977 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:28:45,086 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:28:45,086 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month'}
2025-06-24 12:28:45,107 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:28:45,107 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:28:48,148 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:28:48,148 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY merchant_user_id HAVING COUNT(*) > 2'}
2025-06-24 12:28:48,148 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >...
2025-06-24 12:28:48,149 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:28:48,149 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY merchant_user_id HAVING COUNT(*) > 2
2025-06-24 12:28:48,149 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >...
2025-06-24 12:28:51,223 - api_server - INFO - ✅ Query executed successfully, returned 13 rows
2025-06-24 12:28:51,509 - api_server - INFO - ✅ Dynamic SQL completed successfully with 13 rows
2025-06-24 12:28:51,510 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.36s
2025-06-24 12:29:14,147 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:29:14,148 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month', 'sql_query': 'SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY merchant_user_id HAVING COUNT(*) > 2', 'was_helpful': False, 'improvement_suggestion': 'give me one number to answer the question asked'}
2025-06-24 12:29:14,148 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 12:29:14,163 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:29:14,163 - api_server - INFO - 💡 Improvement suggestion recorded: give me one number to answer the question asked...
2025-06-24 12:29:14,256 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 12:29:14,256 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:29:14,331 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 12:29:14,331 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month'}
2025-06-24 12:29:14,338 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 12:29:14,338 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 12:29:22,904 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:29:22,905 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month'}
2025-06-24 12:29:22,922 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 12:29:22,922 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:29:23,515 - api_server - INFO - 🔧 Tool execution request: get_database_status
2025-06-24 12:29:23,516 - api_server - INFO - ⚙️ Executing get_database_status with parameters: {}
2025-06-24 12:29:23,516 - api_server - INFO - 🔍 Executing query: 
        SELECT 
            (SELECT COUNT(*) FROM subscription_contract_v2) as total_subscriptions,...
2025-06-24 12:29:27,018 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:29:27,337 - api_server - INFO - ✅ Tool get_database_status completed successfully in 3.82s
2025-06-24 12:32:23,164 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:32:23,165 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month'}
2025-06-24 12:32:23,185 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 12:32:23,185 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:32:26,299 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:32:26,300 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY merchant_user_id HAVING COUNT(*) > 2'}
2025-06-24 12:32:26,300 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >...
2025-06-24 12:32:26,300 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:32:26,300 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY merchant_user_id HAVING COUNT(*) > 2
2025-06-24 12:32:26,300 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >...
2025-06-24 12:32:29,535 - api_server - INFO - ✅ Query executed successfully, returned 13 rows
2025-06-24 12:32:29,832 - api_server - INFO - ✅ Dynamic SQL completed successfully with 13 rows
2025-06-24 12:32:29,833 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.53s
2025-06-24 12:32:50,363 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:32:50,364 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month', 'sql_query': 'SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY merchant_user_id HAVING COUNT(*) > 2', 'was_helpful': False, 'improvement_suggestion': 'for this instead of showing table, give one answer'}
2025-06-24 12:32:50,364 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 12:32:50,379 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:32:50,379 - api_server - INFO - 💡 Improvement suggestion recorded: for this instead of showing table, give one answer...
2025-06-24 12:32:50,472 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 12:32:50,472 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:32:50,548 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 12:32:50,548 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month'}
2025-06-24 12:32:50,555 - api_server - INFO - 🔍 Found 2 similar queries for analysis
2025-06-24 12:32:50,556 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 12:32:52,726 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:32:52,726 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'how many number of merchants have more than 2 sbscriptions in last month'}
2025-06-24 12:32:52,741 - api_server - INFO - 💡 Found 2 improvement suggestions for similar queries
2025-06-24 12:32:52,741 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:32:54,256 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:32:54,257 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY merchant_user_id HAVING COUNT(*) > 2'}
2025-06-24 12:32:54,257 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >...
2025-06-24 12:32:54,257 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:32:54,257 - api_server - INFO - 🔍 Executing: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY merchant_user_id HAVING COUNT(*) > 2
2025-06-24 12:32:54,257 - api_server - INFO - 🔍 Executing query: SELECT COUNT(DISTINCT merchant_user_id) FROM subscription_contract_v2 WHERE subcription_start_date >...
2025-06-24 12:32:57,832 - api_server - INFO - ✅ Query executed successfully, returned 13 rows
2025-06-24 12:32:58,241 - api_server - INFO - ✅ Dynamic SQL completed successfully with 13 rows
2025-06-24 12:32:58,242 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.99s
2025-06-24 12:58:39,045 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:58:39,046 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare the subscriptions vs payments in the mont of may and visualise them'}
2025-06-24 12:58:39,070 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:58:39,070 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.03s
2025-06-24 12:58:42,216 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:58:42,216 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_payments'}
2025-06-24 12:58:42,217 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YE...
2025-06-24 12:58:42,217 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:58:42,217 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_payments
2025-06-24 12:58:42,217 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YE...
2025-06-24 12:58:45,313 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:58:45,606 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:58:45,606 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.39s
2025-06-24 12:59:01,668 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 12:59:01,669 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare the subscriptions vs payments in the mont of may and visualise them', 'sql_query': 'SELECT (SELECT COUNT(*) FROM subscription_contract_v2 WHERE MONTH(subcription_start_date) = 5 AND YEAR(subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions, (SELECT COUNT(*) FROM subscription_payment_details WHERE MONTH(created_date) = 5 AND YEAR(created_date) = YEAR(CURDATE())) AS may_payments', 'was_helpful': False, 'improvement_suggestion': 'if data not suitable give only the numeric comparison'}
2025-06-24 12:59:01,669 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 12:59:01,686 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 12:59:01,686 - api_server - INFO - 💡 Improvement suggestion recorded: if data not suitable give only the numeric comparison...
2025-06-24 12:59:01,778 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 12:59:01,778 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 12:59:01,854 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 12:59:01,854 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare the subscriptions vs payments in the mont of may and visualise them'}
2025-06-24 12:59:01,861 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 12:59:01,861 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 12:59:12,833 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 12:59:12,834 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare subscription vs payments in the month of may'}
2025-06-24 12:59:12,849 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 12:59:12,849 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 12:59:16,716 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 12:59:16,717 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE()) ) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions, (SELECT COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 4 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS april_payments, (SELECT COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS may_payments'}
2025-06-24 12:59:16,717 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 12:59:16,717 - api_server - INFO - ✅ SQL validation passed
2025-06-24 12:59:16,717 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE()) ) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions, (SELECT COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 4 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS april_payments, (SELECT COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS may_payments
2025-06-24 12:59:16,718 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 12:59:20,138 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 12:59:20,429 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 12:59:20,430 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.71s
2025-06-24 13:01:17,119 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 13:01:17,120 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare subscription vs payments in the month of may', 'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE()) ) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = YEAR(CURDATE())) AS may_subscriptions, (SELECT COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 4 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS april_payments, (SELECT COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS may_payments', 'was_helpful': False}
2025-06-24 13:01:17,120 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 13:01:17,135 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 13:01:17,227 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 13:01:17,227 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 13:01:17,305 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 13:01:17,305 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare subscription vs payments in the month of may'}
2025-06-24 13:01:17,312 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 13:01:17,312 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 14:31:33,108 - faiss.loader - INFO - Loading faiss.
2025-06-24 14:31:33,130 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-24 14:31:33,133 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-24 14:31:37,153 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-24 14:31:37,153 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 14:31:37,907 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 14:31:37,910 - __main__ - INFO - 🧠 Loaded 11 queries from memory
2025-06-24 14:31:37,910 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 14:31:37,912 - __main__ - INFO - 🚀 Starting ENHANCED RENDER.COM server on port 8000
2025-06-24 14:31:37,912 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-24 14:31:37,912 - __main__ - INFO - 🧠 Full semantic learning support enabled
2025-06-24 14:31:37,912 - __main__ - INFO - 💡 Enhanced feedback system with improvement suggestions enabled
2025-06-24 14:31:37,912 - __main__ - INFO - 📊 NEW: Graph generation capabilities enabled
2025-06-24 14:31:37,954 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-24 14:31:37,955 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 14:31:38,010 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 14:31:38,013 - api_server - INFO - 🧠 Loaded 11 queries from memory
2025-06-24 14:31:38,013 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 14:31:38,015 - api_server - INFO - 🚀 Starting ENHANCED Subscription Analytics API Server with Graph Generation
2025-06-24 14:31:38,015 - api_server - INFO - Semantic learning: enabled
2025-06-24 14:31:38,015 - api_server - INFO - Available tools: 9 (including graph generation)
2025-06-24 14:31:54,332 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:31:54,332 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Compare April vs May subscriptions and visualize them'}
2025-06-24 14:31:54,381 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 14:31:54,381 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.05s
2025-06-24 14:31:57,895 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:31:57,896 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions'}
2025-06-24 14:31:57,896 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:31:57,897 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:31:57,898 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions
2025-06-24 14:31:57,898 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:31:59,405 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-24 14:31:59,406 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-24 14:31:59,406 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-24 14:32:01,294 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:32:01,661 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:32:01,662 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.77s
2025-06-24 14:32:22,527 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 14:32:22,528 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'Compare April vs May subscriptions and visualize them', 'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions', 'was_helpful': False, 'improvement_suggestion': 'when i ask for something and also to visualise, show me both the data and the graoh'}
2025-06-24 14:32:22,529 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 14:32:22,545 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 14:32:22,545 - api_server - INFO - 💡 Improvement suggestion recorded: when i ask for something and also to visualise, show me both the data and the graoh...
2025-06-24 14:32:22,637 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 14:32:22,637 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 14:32:22,714 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 14:32:22,714 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'Compare April vs May subscriptions and visualize them'}
2025-06-24 14:32:22,721 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 14:32:22,721 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 14:32:27,895 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:32:27,895 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Compare April vs May subscriptions and visualize'}
2025-06-24 14:32:27,911 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 14:32:27,911 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 14:32:29,930 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:32:29,930 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS April_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS May_subscriptions'}
2025-06-24 14:32:29,931 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:32:29,931 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:32:29,931 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS April_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS May_subscriptions
2025-06-24 14:32:29,931 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:32:33,069 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:32:33,352 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:32:33,353 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.42s
2025-06-24 14:32:38,166 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:32:38,166 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Compare April vs May subscriptions'}
2025-06-24 14:32:38,181 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 14:32:38,181 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 14:32:40,270 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:32:40,272 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions'}
2025-06-24 14:32:40,272 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:32:40,272 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:32:40,272 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions
2025-06-24 14:32:40,272 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:32:43,541 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:32:43,828 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:32:43,828 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.56s
2025-06-24 14:48:32,970 - api_server - INFO - 🛑 Shutting down Enhanced API Server
2025-06-24 14:48:35,180 - faiss.loader - INFO - Loading faiss.
2025-06-24 14:48:35,192 - faiss.loader - INFO - Successfully loaded faiss.
2025-06-24 14:48:35,195 - faiss - INFO - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-24 14:48:39,202 - __main__ - INFO - ✅ Semantic learning libraries available
2025-06-24 14:48:39,202 - __main__ - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 14:48:39,895 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 14:48:39,897 - __main__ - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 14:48:39,899 - __main__ - INFO - 🚀 Starting COMPLETE FIXED RENDER.COM server on port 8000
2025-06-24 14:48:39,899 - __main__ - INFO - 🛡️ Enhanced error handling and logging enabled
2025-06-24 14:48:39,899 - __main__ - INFO - 🧠 Full semantic learning support enabled
2025-06-24 14:48:39,899 - __main__ - INFO - 💡 Enhanced feedback system with improvement suggestions enabled
2025-06-24 14:48:39,899 - __main__ - INFO - 📊 COMPLETE: Graph generation with comparison support enabled
2025-06-24 14:48:39,899 - __main__ - INFO - 🔧 FIXED: Single-row comparison data (April vs May) support enabled
2025-06-24 14:48:39,942 - api_server - INFO - ✅ Semantic learning libraries available
2025-06-24 14:48:39,942 - api_server - INFO - 🧠 Loading LOCAL semantic model from ./model - NO DOWNLOADS
2025-06-24 14:48:39,993 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: cpu
2025-06-24 14:48:39,994 - api_server - INFO - ✅ Semantic Query Learner: LOCAL MODEL LOADED - NO INTERNET USED
2025-06-24 14:48:39,997 - api_server - INFO - 🚀 Starting COMPLETE FIXED Subscription Analytics API Server with Enhanced Graph Generation
2025-06-24 14:48:39,997 - api_server - INFO - Semantic learning: enabled
2025-06-24 14:48:39,997 - api_server - INFO - Available tools: 9 (including enhanced graph generation)
2025-06-24 14:50:29,972 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:50:29,974 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 14:50:29,974 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 14:52:26,471 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:52:26,472 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'Visualize top 10 users by success rate'}
2025-06-24 14:52:26,473 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.00s
2025-06-24 14:52:29,967 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:52:29,968 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10'}
2025-06-24 14:52:29,968 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN...
2025-06-24 14:52:29,969 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:52:29,969 - api_server - INFO - 🔍 Executing: SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10
2025-06-24 14:52:29,969 - api_server - INFO - 🔍 Executing query: SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN...
2025-06-24 14:52:31,425 - mysql.connector - INFO - package: mysql.connector.plugins
2025-06-24 14:52:31,426 - mysql.connector - INFO - plugin_name: caching_sha2_password
2025-06-24 14:52:31,426 - mysql.connector - INFO - AUTHENTICATION_PLUGIN_CLASS: MySQLCachingSHA2PasswordAuthPlugin
2025-06-24 14:52:33,215 - api_server - INFO - ✅ Query executed successfully, returned 10 rows
2025-06-24 14:52:33,506 - api_server - INFO - ✅ Dynamic SQL completed successfully with 10 rows
2025-06-24 14:52:33,507 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.54s
2025-06-24 14:52:33,611 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 14:52:33,611 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'merchant_user_id': '1705538300', 'total_subscriptions': 40, 'successful_payments': 37.0, 'success_rate': 92.5}, {'merchant_user_id': '1705537655', 'total_subscriptions': 11, 'successful_payments': 10.0, 'success_rate': 90.91}, {'merchant_user_id': '1705490261', 'total_subscriptions': 16, 'successful_payments': 13.0, 'success_rate': 81.25}, {'merchant_user_id': '1705544966', 'total_subscriptions': 16, 'successful_payments': 13.0, 'success_rate': 81.25}, {'merchant_user_id': '1001561217', 'total_subscriptions': 15, 'successful_payments': 12.0, 'success_rate': 80.0}, {'merchant_user_id': '1705465232', 'total_subscriptions': 5, 'successful_payments': 4.0, 'success_rate': 80.0}, {'merchant_user_id': '1001656012', 'total_subscriptions': 17, 'successful_payments': 13.0, 'success_rate': 76.47}, {'merchant_user_id': '1002576833', 'total_subscriptions': 6, 'successful_payments': 4.0, 'success_rate': 66.67}, {'merchant_user_id': '1700428205', 'total_subscriptions': 16, 'successful_payments': 10.0, 'success_rate': 62.5}, {'merchant_user_id': '1700701136', 'total_subscriptions': 83, 'successful_payments': 49.0, 'success_rate': 59.04}], 'graph_type': 'bar'}
2025-06-24 14:52:33,611 - api_server - INFO - 📊 Analyzing 10 rows with columns: ['merchant_user_id', 'total_subscriptions', 'successful_payments', 'success_rate']
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Column analysis: {'merchant_user_id': {'type': 'categorical', 'unique_count': 10, 'categories': ['1705537655', '1705544966', '1705465232', '1001656012', '1700428205', '1705490261', '1700701136', '1705538300', '1002576833', '1001561217']}, 'total_subscriptions': {'type': 'numeric', 'min': 5, 'max': 83, 'unique_count': 8}, 'successful_payments': {'type': 'numeric', 'min': 4.0, 'max': 49.0, 'unique_count': 6}, 'success_rate': {'type': 'numeric', 'min': 59.04, 'max': 92.5, 'unique_count': 8}}
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Column classification: numeric=['total_subscriptions', 'successful_payments', 'success_rate'], datetime=[], categorical=['merchant_user_id']
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Added bar chart recommendation: merchant_user_id vs total_subscriptions
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Added scatter plot recommendation
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Added horizontal bar chart recommendation
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Final recommendations (3 total): ['bar', 'horizontal_bar', 'scatter']
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Graph analysis for 10 rows:
2025-06-24 14:52:33,612 - api_server - INFO -    Column analysis: {'merchant_user_id': {'type': 'categorical', 'unique_count': 10, 'categories': ['1705537655', '1705544966', '1705465232', '1001656012', '1700428205', '1705490261', '1700701136', '1705538300', '1002576833', '1001561217']}, 'total_subscriptions': {'type': 'numeric', 'min': 5, 'max': 83, 'unique_count': 8}, 'successful_payments': {'type': 'numeric', 'min': 4.0, 'max': 49.0, 'unique_count': 6}, 'success_rate': {'type': 'numeric', 'min': 59.04, 'max': 92.5, 'unique_count': 8}}
2025-06-24 14:52:33,612 - api_server - INFO -    Recommended graphs: ['bar', 'horizontal_bar', 'scatter']
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Selected graph type: bar - Categorical Comparison
2025-06-24 14:52:33,612 - api_server - INFO - 📊 Generated bar graph with 10 data points
2025-06-24 14:52:33,612 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 14:52:43,391 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 14:52:43,391 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'Visualize top 10 users by success rate', 'sql_query': 'SELECT sc.merchant_user_id, COUNT(*) AS total_subscriptions, SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) AS successful_payments, ROUND((SUM(CASE WHEN pd.status = "ACTIVE" THEN 1 ELSE 0 END) * 100.0 / COUNT(*)), 2) AS success_rate FROM subscription_contract_v2 AS sc LEFT JOIN subscription_payment_details AS pd ON sc.subscription_id = pd.subscription_id GROUP BY sc.merchant_user_id HAVING COUNT(*) >= 3 ORDER BY success_rate DESC LIMIT 10', 'was_helpful': True}
2025-06-24 14:52:43,391 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 14:52:43,430 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 14:52:43,536 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 14:52:43,536 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.15s
2025-06-24 14:53:03,646 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:53:03,647 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare the subscriptions in may and april and visualise them'}
2025-06-24 14:53:03,666 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 14:53:03,666 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 14:53:05,736 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:53:05,736 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions'}
2025-06-24 14:53:05,737 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:53:05,737 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:53:05,737 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions
2025-06-24 14:53:05,737 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:53:09,581 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:53:09,887 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:53:09,888 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 4.15s
2025-06-24 14:53:09,985 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 14:53:09,985 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'april_subscriptions': 0, 'may_subscriptions': 0}], 'graph_type': 'bar'}
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Analyzing 1 rows with columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Column analysis: {'april_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}, 'may_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}}
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Column classification: numeric=['april_subscriptions', 'may_subscriptions'], datetime=[], categorical=[]
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Detected single-row comparison data with 2 numeric columns
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Added comparison chart recommendations for columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Final recommendations (2 total): ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 14:53:09,985 - api_server - INFO - 📊 Graph analysis for 1 rows:
2025-06-24 14:53:09,985 - api_server - INFO -    Column analysis: {'april_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}, 'may_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}}
2025-06-24 14:53:09,985 - api_server - INFO -    Recommended graphs: ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 14:53:09,985 - api_server - WARNING - ⚠️ Requested graph type 'bar' not in recommendations, attempting anyway...
2025-06-24 14:53:09,986 - api_server - INFO - 📊 Selected graph type: comparison_bar - Comparison Analysis
2025-06-24 14:53:09,986 - api_server - INFO - 📊 Preparing comparison bar data for columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:53:09,986 - api_server - INFO - 📊 Row data: {'april_subscriptions': 0, 'may_subscriptions': 0}
2025-06-24 14:53:09,986 - api_server - INFO - 📊 Generated categories: ['April', 'May']
2025-06-24 14:53:09,986 - api_server - INFO - 📊 Generated values: [0.0, 0.0]
2025-06-24 14:53:09,986 - api_server - INFO - 📊 Generated comparison_bar graph with 1 data points
2025-06-24 14:53:09,986 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 14:53:39,676 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 14:53:39,677 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare the subscriptions in may and april and visualise them', 'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions', 'was_helpful': False, 'improvement_suggestion': 'no values in the graph'}
2025-06-24 14:53:39,677 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 14:53:39,692 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 14:53:39,692 - api_server - INFO - 💡 Improvement suggestion recorded: no values in the graph...
2025-06-24 14:53:39,784 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 14:53:39,784 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 14:53:39,861 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 14:53:39,862 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare the subscriptions in may and april and visualise them'}
2025-06-24 14:53:39,868 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 14:53:39,868 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 14:54:00,437 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:54:00,438 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare the subscriptions in may and april'}
2025-06-24 14:54:00,452 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 14:54:00,453 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 14:54:02,531 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:54:02,531 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions'}
2025-06-24 14:54:02,531 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:54:02,532 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:54:02,532 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions
2025-06-24 14:54:02,532 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:54:05,527 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:54:05,813 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:54:05,813 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.28s
2025-06-24 14:54:05,917 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 14:54:05,917 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'april_subscriptions': 0, 'may_subscriptions': 0}], 'graph_type': 'bar'}
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Analyzing 1 rows with columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Column analysis: {'april_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}, 'may_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}}
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Column classification: numeric=['april_subscriptions', 'may_subscriptions'], datetime=[], categorical=[]
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Detected single-row comparison data with 2 numeric columns
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Added comparison chart recommendations for columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Final recommendations (2 total): ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Graph analysis for 1 rows:
2025-06-24 14:54:05,917 - api_server - INFO -    Column analysis: {'april_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}, 'may_subscriptions': {'type': 'numeric', 'min': 0, 'max': 0, 'unique_count': 1}}
2025-06-24 14:54:05,917 - api_server - INFO -    Recommended graphs: ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 14:54:05,917 - api_server - WARNING - ⚠️ Requested graph type 'bar' not in recommendations, attempting anyway...
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Selected graph type: comparison_bar - Comparison Analysis
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Preparing comparison bar data for columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Row data: {'april_subscriptions': 0, 'may_subscriptions': 0}
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Generated categories: ['April', 'May']
2025-06-24 14:54:05,917 - api_server - INFO - 📊 Generated values: [0.0, 0.0]
2025-06-24 14:54:05,918 - api_server - INFO - 📊 Generated comparison_bar graph with 1 data points
2025-06-24 14:54:05,918 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 14:58:18,092 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:58:18,094 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare subscriptions in april and may'}
2025-06-24 14:58:18,109 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 14:58:18,110 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 14:58:21,707 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:58:21,708 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions'}
2025-06-24 14:58:21,708 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:58:21,708 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:58:21,708 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions
2025-06-24 14:58:21,708 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:58:24,706 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:58:24,993 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:58:24,994 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.29s
2025-06-24 14:58:50,329 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 14:58:50,330 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare subscriptions in april and may', 'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2024) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2024) AS may_subscriptions', 'was_helpful': False, 'improvement_suggestion': 'all dates are supposed to be for 2025'}
2025-06-24 14:58:50,330 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 14:58:50,344 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 14:58:50,344 - api_server - INFO - 💡 Improvement suggestion recorded: all dates are supposed to be for 2025...
2025-06-24 14:58:50,437 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 14:58:50,437 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 14:58:50,514 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 14:58:50,514 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'compare subscriptions in april and may'}
2025-06-24 14:58:50,520 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 14:58:50,521 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 14:59:02,051 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:59:02,051 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'compare subscriptions in may and april'}
2025-06-24 14:59:02,065 - api_server - INFO - 💡 Found 1 improvement suggestions for similar queries
2025-06-24 14:59:02,066 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.01s
2025-06-24 14:59:03,913 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:59:03,913 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions'}
2025-06-24 14:59:03,914 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:59:03,914 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:59:03,914 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions
2025-06-24 14:59:03,914 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:59:06,961 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:59:07,247 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:59:07,248 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.33s
2025-06-24 14:59:10,338 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 14:59:10,338 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'compare subscriptions in may and april', 'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions', 'was_helpful': True}
2025-06-24 14:59:10,338 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 14:59:10,353 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 14:59:10,446 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 14:59:10,446 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 14:59:12,953 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 14:59:12,954 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'visualise this'}
2025-06-24 14:59:12,968 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 14:59:12,968 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.01s
2025-06-24 14:59:14,868 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 14:59:14,868 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions'}
2025-06-24 14:59:14,868 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:59:14,869 - api_server - INFO - ✅ SQL validation passed
2025-06-24 14:59:14,869 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions
2025-06-24 14:59:14,869 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 14:59:17,914 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 14:59:18,202 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 14:59:18,203 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.33s
2025-06-24 14:59:18,306 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 14:59:18,306 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'april_subscriptions': 1113, 'may_subscriptions': 1306}], 'graph_type': 'bar'}
2025-06-24 14:59:18,306 - api_server - INFO - 📊 Analyzing 1 rows with columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:59:18,306 - api_server - INFO - 📊 Column analysis: {'april_subscriptions': {'type': 'numeric', 'min': 1113, 'max': 1113, 'unique_count': 1}, 'may_subscriptions': {'type': 'numeric', 'min': 1306, 'max': 1306, 'unique_count': 1}}
2025-06-24 14:59:18,306 - api_server - INFO - 📊 Column classification: numeric=['april_subscriptions', 'may_subscriptions'], datetime=[], categorical=[]
2025-06-24 14:59:18,306 - api_server - INFO - 📊 Detected single-row comparison data with 2 numeric columns
2025-06-24 14:59:18,306 - api_server - INFO - 📊 Added comparison chart recommendations for columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Final recommendations (2 total): ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Graph analysis for 1 rows:
2025-06-24 14:59:18,307 - api_server - INFO -    Column analysis: {'april_subscriptions': {'type': 'numeric', 'min': 1113, 'max': 1113, 'unique_count': 1}, 'may_subscriptions': {'type': 'numeric', 'min': 1306, 'max': 1306, 'unique_count': 1}}
2025-06-24 14:59:18,307 - api_server - INFO -    Recommended graphs: ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 14:59:18,307 - api_server - WARNING - ⚠️ Requested graph type 'bar' not in recommendations, attempting anyway...
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Selected graph type: comparison_bar - Comparison Analysis
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Preparing comparison bar data for columns: ['april_subscriptions', 'may_subscriptions']
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Row data: {'april_subscriptions': 1113, 'may_subscriptions': 1306}
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Generated categories: ['April', 'May']
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Generated values: [1113.0, 1306.0]
2025-06-24 14:59:18,307 - api_server - INFO - 📊 Generated comparison_bar graph with 1 data points
2025-06-24 14:59:18,307 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 14:59:32,659 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 14:59:32,660 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'visualise this', 'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions', 'was_helpful': True}
2025-06-24 14:59:32,660 - api_server - INFO - 🧠 Adding positive feedback to memory...
2025-06-24 14:59:32,673 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 14:59:32,766 - api_server - INFO - 💾 Positive feedback stored successfully
2025-06-24 14:59:32,766 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 15:00:15,590 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 15:00:15,591 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'visualise the success and falure rates in may'}
2025-06-24 15:00:15,606 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 15:00:15,606 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 15:00:17,625 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 15:00:17,626 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS success_rate, (SELECT COUNT(CASE WHEN pd.status <> "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS failure_rate'}
2025-06-24 15:00:17,626 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription...
2025-06-24 15:00:17,626 - api_server - INFO - ✅ SQL validation passed
2025-06-24 15:00:17,626 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS success_rate, (SELECT COUNT(CASE WHEN pd.status <> "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS failure_rate
2025-06-24 15:00:17,627 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription...
2025-06-24 15:00:20,666 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 15:00:20,954 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 15:00:20,954 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.33s
2025-06-24 15:00:21,058 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 15:00:21,058 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'success_rate': 16.68985, 'failure_rate': 83.31015}], 'graph_type': 'bar'}
2025-06-24 15:00:21,058 - api_server - INFO - 📊 Analyzing 1 rows with columns: ['success_rate', 'failure_rate']
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Column analysis: {'success_rate': {'type': 'numeric', 'min': 16.68985, 'max': 16.68985, 'unique_count': 1}, 'failure_rate': {'type': 'numeric', 'min': 83.31015, 'max': 83.31015, 'unique_count': 1}}
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Column classification: numeric=['success_rate', 'failure_rate'], datetime=[], categorical=[]
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Detected single-row comparison data with 2 numeric columns
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Added comparison chart recommendations for columns: ['success_rate', 'failure_rate']
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Final recommendations (2 total): ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Graph analysis for 1 rows:
2025-06-24 15:00:21,059 - api_server - INFO -    Column analysis: {'success_rate': {'type': 'numeric', 'min': 16.68985, 'max': 16.68985, 'unique_count': 1}, 'failure_rate': {'type': 'numeric', 'min': 83.31015, 'max': 83.31015, 'unique_count': 1}}
2025-06-24 15:00:21,059 - api_server - INFO -    Recommended graphs: ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 15:00:21,059 - api_server - WARNING - ⚠️ Requested graph type 'bar' not in recommendations, attempting anyway...
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Selected graph type: comparison_bar - Comparison Analysis
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Preparing comparison bar data for columns: ['success_rate', 'failure_rate']
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Row data: {'success_rate': 16.68985, 'failure_rate': 83.31015}
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Generated categories: ['Success Rate', 'Failure Rate']
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Generated values: [16.68985, 83.31015]
2025-06-24 15:00:21,059 - api_server - INFO - 📊 Generated comparison_bar graph with 1 data points
2025-06-24 15:00:21,059 - api_server - INFO - ✅ Tool generate_graph_data completed successfully in 0.00s
2025-06-24 15:00:27,064 - api_server - INFO - 🔧 Tool execution request: record_query_feedback
2025-06-24 15:00:27,066 - api_server - INFO - ⚙️ Executing record_query_feedback with parameters: {'original_question': 'visualise the success and falure rates in may', 'sql_query': 'SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS success_rate, (SELECT COUNT(CASE WHEN pd.status <> "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS failure_rate', 'was_helpful': False, 'improvement_suggestion': 'give pie chart'}
2025-06-24 15:00:27,066 - api_server - INFO - 🧠 Adding negative feedback to memory...
2025-06-24 15:00:27,082 - api_server - INFO - ✅ Encoding successful with strategy 1
2025-06-24 15:00:27,082 - api_server - INFO - 💡 Improvement suggestion recorded: give pie chart...
2025-06-24 15:00:27,173 - api_server - INFO - 💾 Negative feedback stored successfully
2025-06-24 15:00:27,173 - api_server - INFO - ✅ Tool record_query_feedback completed successfully in 0.11s
2025-06-24 15:00:27,249 - api_server - INFO - 🔧 Tool execution request: get_query_suggestions
2025-06-24 15:00:27,250 - api_server - INFO - ⚙️ Executing get_query_suggestions with parameters: {'original_question': 'visualise the success and falure rates in may'}
2025-06-24 15:00:27,256 - api_server - INFO - 🔍 Found 1 similar queries for analysis
2025-06-24 15:00:27,256 - api_server - INFO - ✅ Tool get_query_suggestions completed successfully in 0.01s
2025-06-24 15:00:31,259 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 15:00:31,259 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'try agaij'}
2025-06-24 15:00:31,274 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 15:00:31,275 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 15:00:33,259 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 15:00:33,259 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions'}
2025-06-24 15:00:33,259 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 15:00:33,260 - api_server - INFO - ✅ SQL validation passed
2025-06-24 15:00:33,260 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 4 AND YEAR(sc.subcription_start_date) = 2025) AS april_subscriptions, (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc.subcription_start_date) = 5 AND YEAR(sc.subcription_start_date) = 2025) AS may_subscriptions
2025-06-24 15:00:33,260 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(DISTINCT sc.subscription_id) FROM subscription_contract_v2 AS sc WHERE MONTH(sc...
2025-06-24 15:00:36,412 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 15:00:36,711 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 15:00:36,712 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.45s
2025-06-24 15:00:55,356 - api_server - INFO - 🔧 Tool execution request: get_improvement_suggestions
2025-06-24 15:00:55,357 - api_server - INFO - ⚙️ Executing get_improvement_suggestions with parameters: {'original_question': 'give me the success rate vs failure rate pie chart'}
2025-06-24 15:00:55,372 - api_server - INFO - 💡 Found 0 improvement suggestions for similar queries
2025-06-24 15:00:55,372 - api_server - INFO - ✅ Tool get_improvement_suggestions completed successfully in 0.02s
2025-06-24 15:00:57,475 - api_server - INFO - 🔧 Tool execution request: execute_dynamic_sql
2025-06-24 15:00:57,476 - api_server - INFO - ⚙️ Executing execute_dynamic_sql with parameters: {'sql_query': 'SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS success_rate, (SELECT COUNT(CASE WHEN pd.status <> "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS failure_rate'}
2025-06-24 15:00:57,476 - api_server - INFO - 🔍 Dynamic SQL request received: SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription...
2025-06-24 15:00:57,476 - api_server - INFO - ✅ SQL validation passed
2025-06-24 15:00:57,476 - api_server - INFO - 🔍 Executing: SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS success_rate, (SELECT COUNT(CASE WHEN pd.status <> "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription_payment_details AS pd WHERE MONTH(pd.created_date) = 5 AND YEAR(pd.created_date) = YEAR(CURDATE())) AS failure_rate
2025-06-24 15:00:57,476 - api_server - INFO - 🔍 Executing query: SELECT (SELECT COUNT(CASE WHEN pd.status = "ACTIVE" THEN 1 END) * 100.0 / COUNT(*) FROM subscription...
2025-06-24 15:01:00,518 - api_server - INFO - ✅ Query executed successfully, returned 1 rows
2025-06-24 15:01:00,818 - api_server - INFO - ✅ Dynamic SQL completed successfully with 1 rows
2025-06-24 15:01:00,819 - api_server - INFO - ✅ Tool execute_dynamic_sql completed successfully in 3.34s
2025-06-24 15:01:00,924 - api_server - INFO - 🔧 Tool execution request: generate_graph_data
2025-06-24 15:01:00,924 - api_server - INFO - ⚙️ Executing generate_graph_data with parameters: {'data': [{'success_rate': 16.68985, 'failure_rate': 83.31015}], 'graph_type': 'pie'}
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Analyzing 1 rows with columns: ['success_rate', 'failure_rate']
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Column analysis: {'success_rate': {'type': 'numeric', 'min': 16.68985, 'max': 16.68985, 'unique_count': 1}, 'failure_rate': {'type': 'numeric', 'min': 83.31015, 'max': 83.31015, 'unique_count': 1}}
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Column classification: numeric=['success_rate', 'failure_rate'], datetime=[], categorical=[]
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Detected single-row comparison data with 2 numeric columns
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Added comparison chart recommendations for columns: ['success_rate', 'failure_rate']
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Final recommendations (2 total): ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 15:01:00,924 - api_server - INFO - 📊 Graph analysis for 1 rows:
2025-06-24 15:01:00,924 - api_server - INFO -    Column analysis: {'success_rate': {'type': 'numeric', 'min': 16.68985, 'max': 16.68985, 'unique_count': 1}, 'failure_rate': {'type': 'numeric', 'min': 83.31015, 'max': 83.31015, 'unique_count': 1}}
2025-06-24 15:01:00,924 - api_server - INFO -    Recommended graphs: ['comparison_bar', 'comparison_horizontal_bar']
2025-06-24 15:01:00,924 - api_server - WARNING - ⚠️ Requested graph type 'pie' not in recommendations, attempting anyway...
2025-06-24 15:01:00,924 - api_server - WARNING - Tool generate_graph_data returned error: Graph type 'pie' not suitable for this data structure. Available columns: ['success_rate', 'failure_rate']. Data has 1 rows with 2 numeric columns.
